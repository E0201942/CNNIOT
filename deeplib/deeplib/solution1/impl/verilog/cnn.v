// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cnn,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.784400,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=34,HLS_SYN_DSP=38,HLS_SYN_FF=4754,HLS_SYN_LUT=7252}" *)

module cnn (
        ap_clk,
        ap_rst_n,
        in_data_TDATA,
        in_data_TVALID,
        in_data_TREADY,
        in_data_TKEEP,
        in_data_TSTRB,
        in_data_TUSER,
        in_data_TLAST,
        in_data_TID,
        in_data_TDEST,
        out_data_TDATA,
        out_data_TVALID,
        out_data_TREADY,
        out_data_TKEEP,
        out_data_TSTRB,
        out_data_TUSER,
        out_data_TLAST,
        out_data_TID,
        out_data_TDEST
);

parameter    ap_ST_fsm_state1 = 170'd1;
parameter    ap_ST_fsm_state2 = 170'd2;
parameter    ap_ST_fsm_state3 = 170'd4;
parameter    ap_ST_fsm_state4 = 170'd8;
parameter    ap_ST_fsm_state5 = 170'd16;
parameter    ap_ST_fsm_state6 = 170'd32;
parameter    ap_ST_fsm_state7 = 170'd64;
parameter    ap_ST_fsm_state8 = 170'd128;
parameter    ap_ST_fsm_state9 = 170'd256;
parameter    ap_ST_fsm_state10 = 170'd512;
parameter    ap_ST_fsm_state11 = 170'd1024;
parameter    ap_ST_fsm_state12 = 170'd2048;
parameter    ap_ST_fsm_state13 = 170'd4096;
parameter    ap_ST_fsm_state14 = 170'd8192;
parameter    ap_ST_fsm_state15 = 170'd16384;
parameter    ap_ST_fsm_state16 = 170'd32768;
parameter    ap_ST_fsm_state17 = 170'd65536;
parameter    ap_ST_fsm_state18 = 170'd131072;
parameter    ap_ST_fsm_state19 = 170'd262144;
parameter    ap_ST_fsm_state20 = 170'd524288;
parameter    ap_ST_fsm_state21 = 170'd1048576;
parameter    ap_ST_fsm_state22 = 170'd2097152;
parameter    ap_ST_fsm_state23 = 170'd4194304;
parameter    ap_ST_fsm_state24 = 170'd8388608;
parameter    ap_ST_fsm_state25 = 170'd16777216;
parameter    ap_ST_fsm_state26 = 170'd33554432;
parameter    ap_ST_fsm_state27 = 170'd67108864;
parameter    ap_ST_fsm_state28 = 170'd134217728;
parameter    ap_ST_fsm_state29 = 170'd268435456;
parameter    ap_ST_fsm_state30 = 170'd536870912;
parameter    ap_ST_fsm_state31 = 170'd1073741824;
parameter    ap_ST_fsm_state32 = 170'd2147483648;
parameter    ap_ST_fsm_state33 = 170'd4294967296;
parameter    ap_ST_fsm_state34 = 170'd8589934592;
parameter    ap_ST_fsm_state35 = 170'd17179869184;
parameter    ap_ST_fsm_state36 = 170'd34359738368;
parameter    ap_ST_fsm_state37 = 170'd68719476736;
parameter    ap_ST_fsm_state38 = 170'd137438953472;
parameter    ap_ST_fsm_state39 = 170'd274877906944;
parameter    ap_ST_fsm_state40 = 170'd549755813888;
parameter    ap_ST_fsm_state41 = 170'd1099511627776;
parameter    ap_ST_fsm_state42 = 170'd2199023255552;
parameter    ap_ST_fsm_state43 = 170'd4398046511104;
parameter    ap_ST_fsm_state44 = 170'd8796093022208;
parameter    ap_ST_fsm_state45 = 170'd17592186044416;
parameter    ap_ST_fsm_state46 = 170'd35184372088832;
parameter    ap_ST_fsm_state47 = 170'd70368744177664;
parameter    ap_ST_fsm_state48 = 170'd140737488355328;
parameter    ap_ST_fsm_state49 = 170'd281474976710656;
parameter    ap_ST_fsm_state50 = 170'd562949953421312;
parameter    ap_ST_fsm_state51 = 170'd1125899906842624;
parameter    ap_ST_fsm_state52 = 170'd2251799813685248;
parameter    ap_ST_fsm_state53 = 170'd4503599627370496;
parameter    ap_ST_fsm_state54 = 170'd9007199254740992;
parameter    ap_ST_fsm_state55 = 170'd18014398509481984;
parameter    ap_ST_fsm_state56 = 170'd36028797018963968;
parameter    ap_ST_fsm_state57 = 170'd72057594037927936;
parameter    ap_ST_fsm_state58 = 170'd144115188075855872;
parameter    ap_ST_fsm_state59 = 170'd288230376151711744;
parameter    ap_ST_fsm_state60 = 170'd576460752303423488;
parameter    ap_ST_fsm_state61 = 170'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 170'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 170'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 170'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 170'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 170'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 170'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 170'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 170'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 170'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 170'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 170'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 170'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 170'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 170'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 170'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 170'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 170'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 170'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 170'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 170'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 170'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 170'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 170'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 170'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 170'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 170'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 170'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 170'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 170'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 170'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 170'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 170'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 170'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 170'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 170'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 170'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 170'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 170'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 170'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 170'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 170'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 170'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 170'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 170'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 170'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 170'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 170'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 170'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 170'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 170'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 170'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 170'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 170'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 170'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 170'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 170'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 170'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 170'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 170'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 170'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 170'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 170'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 170'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 170'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 170'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 170'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 170'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 170'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 170'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 170'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 170'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 170'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 170'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 170'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 170'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 170'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 170'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 170'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 170'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 170'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 170'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 170'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 170'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 170'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 170'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 170'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 170'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 170'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 170'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 170'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 170'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 170'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 170'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 170'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 170'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 170'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 170'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 170'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 170'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 170'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 170'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 170'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 170'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 170'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 170'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 170'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 170'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 170'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 170'd748288838313422294120286634350736906063837462003712;

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_data_TDATA;
input   in_data_TVALID;
output   in_data_TREADY;
input  [3:0] in_data_TKEEP;
input  [3:0] in_data_TSTRB;
input  [0:0] in_data_TUSER;
input  [0:0] in_data_TLAST;
input  [0:0] in_data_TID;
input  [0:0] in_data_TDEST;
output  [31:0] out_data_TDATA;
output   out_data_TVALID;
input   out_data_TREADY;
output  [3:0] out_data_TKEEP;
output  [3:0] out_data_TSTRB;
output  [0:0] out_data_TUSER;
output  [0:0] out_data_TLAST;
output  [0:0] out_data_TID;
output  [0:0] out_data_TDEST;

reg    ap_rst_n_inv;
reg   [31:0] in_data_data_V_0_data_out;
wire    in_data_data_V_0_vld_in;
wire    in_data_data_V_0_vld_out;
wire    in_data_data_V_0_ack_in;
wire    in_data_data_V_0_ack_out;
reg   [31:0] in_data_data_V_0_payload_A;
reg   [31:0] in_data_data_V_0_payload_B;
reg    in_data_data_V_0_sel_rd;
reg    in_data_data_V_0_sel_wr;
wire    in_data_data_V_0_sel;
wire    in_data_data_V_0_load_A;
wire    in_data_data_V_0_load_B;
reg   [1:0] in_data_data_V_0_state;
wire    in_data_data_V_0_state_cmp_full;
reg   [3:0] in_data_keep_V_0_data_out;
wire    in_data_keep_V_0_vld_in;
wire    in_data_keep_V_0_vld_out;
wire    in_data_keep_V_0_ack_in;
wire    in_data_keep_V_0_ack_out;
reg   [3:0] in_data_keep_V_0_payload_A;
reg   [3:0] in_data_keep_V_0_payload_B;
reg    in_data_keep_V_0_sel_rd;
reg    in_data_keep_V_0_sel_wr;
wire    in_data_keep_V_0_sel;
wire    in_data_keep_V_0_load_A;
wire    in_data_keep_V_0_load_B;
reg   [1:0] in_data_keep_V_0_state;
wire    in_data_keep_V_0_state_cmp_full;
reg   [3:0] in_data_strb_V_0_data_out;
wire    in_data_strb_V_0_vld_in;
wire    in_data_strb_V_0_vld_out;
wire    in_data_strb_V_0_ack_in;
wire    in_data_strb_V_0_ack_out;
reg   [3:0] in_data_strb_V_0_payload_A;
reg   [3:0] in_data_strb_V_0_payload_B;
reg    in_data_strb_V_0_sel_rd;
reg    in_data_strb_V_0_sel_wr;
wire    in_data_strb_V_0_sel;
wire    in_data_strb_V_0_load_A;
wire    in_data_strb_V_0_load_B;
reg   [1:0] in_data_strb_V_0_state;
wire    in_data_strb_V_0_state_cmp_full;
reg   [0:0] in_data_user_V_0_data_out;
wire    in_data_user_V_0_vld_in;
wire    in_data_user_V_0_vld_out;
wire    in_data_user_V_0_ack_in;
wire    in_data_user_V_0_ack_out;
reg   [0:0] in_data_user_V_0_payload_A;
reg   [0:0] in_data_user_V_0_payload_B;
reg    in_data_user_V_0_sel_rd;
reg    in_data_user_V_0_sel_wr;
wire    in_data_user_V_0_sel;
wire    in_data_user_V_0_load_A;
wire    in_data_user_V_0_load_B;
reg   [1:0] in_data_user_V_0_state;
wire    in_data_user_V_0_state_cmp_full;
reg   [0:0] in_data_last_V_0_data_out;
wire    in_data_last_V_0_vld_in;
wire    in_data_last_V_0_vld_out;
wire    in_data_last_V_0_ack_in;
wire    in_data_last_V_0_ack_out;
reg   [0:0] in_data_last_V_0_payload_A;
reg   [0:0] in_data_last_V_0_payload_B;
reg    in_data_last_V_0_sel_rd;
reg    in_data_last_V_0_sel_wr;
wire    in_data_last_V_0_sel;
wire    in_data_last_V_0_load_A;
wire    in_data_last_V_0_load_B;
reg   [1:0] in_data_last_V_0_state;
wire    in_data_last_V_0_state_cmp_full;
reg   [0:0] in_data_id_V_0_data_out;
wire    in_data_id_V_0_vld_in;
wire    in_data_id_V_0_vld_out;
wire    in_data_id_V_0_ack_in;
wire    in_data_id_V_0_ack_out;
reg   [0:0] in_data_id_V_0_payload_A;
reg   [0:0] in_data_id_V_0_payload_B;
reg    in_data_id_V_0_sel_rd;
reg    in_data_id_V_0_sel_wr;
wire    in_data_id_V_0_sel;
wire    in_data_id_V_0_load_A;
wire    in_data_id_V_0_load_B;
reg   [1:0] in_data_id_V_0_state;
wire    in_data_id_V_0_state_cmp_full;
reg   [0:0] in_data_dest_V_0_data_out;
wire    in_data_dest_V_0_vld_in;
wire    in_data_dest_V_0_vld_out;
wire    in_data_dest_V_0_ack_in;
wire    in_data_dest_V_0_ack_out;
reg   [0:0] in_data_dest_V_0_payload_A;
reg   [0:0] in_data_dest_V_0_payload_B;
reg    in_data_dest_V_0_sel_rd;
reg    in_data_dest_V_0_sel_wr;
wire    in_data_dest_V_0_sel;
wire    in_data_dest_V_0_load_A;
wire    in_data_dest_V_0_load_B;
reg   [1:0] in_data_dest_V_0_state;
wire    in_data_dest_V_0_state_cmp_full;
reg   [31:0] out_data_data_V_1_data_out;
reg    out_data_data_V_1_vld_in;
wire    out_data_data_V_1_vld_out;
wire    out_data_data_V_1_ack_in;
wire    out_data_data_V_1_ack_out;
reg   [31:0] out_data_data_V_1_payload_A;
reg   [31:0] out_data_data_V_1_payload_B;
reg    out_data_data_V_1_sel_rd;
reg    out_data_data_V_1_sel_wr;
wire    out_data_data_V_1_sel;
wire    out_data_data_V_1_load_A;
wire    out_data_data_V_1_load_B;
reg   [1:0] out_data_data_V_1_state;
wire    out_data_data_V_1_state_cmp_full;
reg   [3:0] out_data_keep_V_1_data_out;
reg    out_data_keep_V_1_vld_in;
wire    out_data_keep_V_1_vld_out;
wire    out_data_keep_V_1_ack_in;
wire    out_data_keep_V_1_ack_out;
reg   [3:0] out_data_keep_V_1_payload_A;
reg   [3:0] out_data_keep_V_1_payload_B;
reg    out_data_keep_V_1_sel_rd;
reg    out_data_keep_V_1_sel_wr;
wire    out_data_keep_V_1_sel;
wire    out_data_keep_V_1_load_A;
wire    out_data_keep_V_1_load_B;
reg   [1:0] out_data_keep_V_1_state;
wire    out_data_keep_V_1_state_cmp_full;
reg   [3:0] out_data_strb_V_1_data_out;
reg    out_data_strb_V_1_vld_in;
wire    out_data_strb_V_1_vld_out;
wire    out_data_strb_V_1_ack_in;
wire    out_data_strb_V_1_ack_out;
reg   [3:0] out_data_strb_V_1_payload_A;
reg   [3:0] out_data_strb_V_1_payload_B;
reg    out_data_strb_V_1_sel_rd;
reg    out_data_strb_V_1_sel_wr;
wire    out_data_strb_V_1_sel;
wire    out_data_strb_V_1_load_A;
wire    out_data_strb_V_1_load_B;
reg   [1:0] out_data_strb_V_1_state;
wire    out_data_strb_V_1_state_cmp_full;
reg   [0:0] out_data_user_V_1_data_out;
reg    out_data_user_V_1_vld_in;
wire    out_data_user_V_1_vld_out;
wire    out_data_user_V_1_ack_in;
wire    out_data_user_V_1_ack_out;
reg   [0:0] out_data_user_V_1_payload_A;
reg   [0:0] out_data_user_V_1_payload_B;
reg    out_data_user_V_1_sel_rd;
reg    out_data_user_V_1_sel_wr;
wire    out_data_user_V_1_sel;
wire    out_data_user_V_1_load_A;
wire    out_data_user_V_1_load_B;
reg   [1:0] out_data_user_V_1_state;
wire    out_data_user_V_1_state_cmp_full;
reg   [0:0] out_data_last_V_1_data_out;
reg    out_data_last_V_1_vld_in;
wire    out_data_last_V_1_vld_out;
wire    out_data_last_V_1_ack_in;
wire    out_data_last_V_1_ack_out;
reg   [0:0] out_data_last_V_1_payload_A;
reg   [0:0] out_data_last_V_1_payload_B;
reg    out_data_last_V_1_sel_rd;
reg    out_data_last_V_1_sel_wr;
wire    out_data_last_V_1_sel;
wire    out_data_last_V_1_load_A;
wire    out_data_last_V_1_load_B;
reg   [1:0] out_data_last_V_1_state;
wire    out_data_last_V_1_state_cmp_full;
reg   [0:0] out_data_id_V_1_data_out;
reg    out_data_id_V_1_vld_in;
wire    out_data_id_V_1_vld_out;
wire    out_data_id_V_1_ack_in;
wire    out_data_id_V_1_ack_out;
reg   [0:0] out_data_id_V_1_payload_A;
reg   [0:0] out_data_id_V_1_payload_B;
reg    out_data_id_V_1_sel_rd;
reg    out_data_id_V_1_sel_wr;
wire    out_data_id_V_1_sel;
wire    out_data_id_V_1_load_A;
wire    out_data_id_V_1_load_B;
reg   [1:0] out_data_id_V_1_state;
wire    out_data_id_V_1_state_cmp_full;
reg   [0:0] out_data_dest_V_1_data_out;
reg    out_data_dest_V_1_vld_in;
wire    out_data_dest_V_1_vld_out;
wire    out_data_dest_V_1_ack_in;
wire    out_data_dest_V_1_ack_out;
reg   [0:0] out_data_dest_V_1_payload_A;
reg   [0:0] out_data_dest_V_1_payload_B;
reg    out_data_dest_V_1_sel_rd;
reg    out_data_dest_V_1_sel_wr;
wire    out_data_dest_V_1_sel;
wire    out_data_dest_V_1_load_A;
wire    out_data_dest_V_1_load_B;
reg   [1:0] out_data_dest_V_1_state;
wire    out_data_dest_V_1_state_cmp_full;
wire    grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n;
reg    in_data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [169:0] ap_CS_fsm;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state139;
wire    ap_CS_fsm_state140;
wire    ap_CS_fsm_state141;
wire    ap_CS_fsm_state170;
wire    grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n;
reg    out_data_TDATA_blk_n;
wire   [31:0] Parameters_q0;
reg   [31:0] reg_571;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state63;
wire  signed [31:0] Parameters_q1;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state91;
wire   [31:0] grp_Axi_Transfer_fu_500_ap_return;
reg    ap_block_state14;
reg    ap_block_state40;
reg    ap_block_state68;
wire   [31:0] grp_fu_555_p1;
reg   [31:0] reg_582;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state73;
wire   [31:0] grp_fu_551_p2;
reg   [31:0] reg_587;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state89;
reg  signed [31:0] reg_594;
wire    ap_CS_fsm_state92;
wire   [31:0] grp_fu_547_p2;
reg   [31:0] reg_599;
wire    ap_CS_fsm_state154;
wire    ap_CS_fsm_state168;
wire   [4:0] idx_1_fu_610_p2;
reg   [4:0] idx_1_reg_1377;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_s_fu_621_p2;
reg   [0:0] tmp_s_reg_1382;
wire    ap_CS_fsm_state5;
wire   [0:0] grp_fu_565_p2;
reg   [0:0] tmp_1_reg_1386;
wire    ap_CS_fsm_state7;
reg   [31:0] Relu_Activation_reg_1390;
wire    ap_CS_fsm_state10;
reg   [31:0] Precision_reg_1395;
reg   [31:0] Parameters_load_5_reg_1401;
wire    ap_CS_fsm_state12;
wire   [30:0] idx_2_fu_636_p2;
reg   [30:0] idx_2_reg_1409;
wire    ap_CS_fsm_state13;
wire   [0:0] tmp_6_fu_642_p2;
reg   [0:0] tmp_6_reg_1414;
wire   [0:0] tmp_2_fu_631_p2;
reg   [0:0] tmp_7_reg_1418;
wire    ap_CS_fsm_state37;
reg   [31:0] Parameters_load_7_reg_1422;
wire    ap_CS_fsm_state38;
wire   [30:0] idx_3_fu_662_p2;
reg   [30:0] idx_3_reg_1430;
wire    ap_CS_fsm_state39;
wire  signed [31:0] tmp1_fu_673_p2;
reg  signed [31:0] tmp1_reg_1435;
wire  signed [31:0] tmp2_fu_679_p2;
reg  signed [31:0] tmp2_reg_1440;
wire    ap_CS_fsm_state65;
wire   [31:0] tmp_14_fu_685_p2;
reg   [31:0] tmp_14_reg_1445;
wire    ap_CS_fsm_state66;
wire   [30:0] idx_4_fu_698_p2;
reg   [30:0] idx_4_reg_1453;
wire    ap_CS_fsm_state67;
reg  signed [31:0] Parameters_load_14_reg_1458;
reg  signed [31:0] Parameters_load_15_reg_1464;
wire    ap_CS_fsm_state93;
reg  signed [31:0] Parameters_load_16_reg_1470;
wire    ap_CS_fsm_state94;
reg  signed [31:0] Parameters_load_17_reg_1487;
wire  signed [31:0] H_Result_fu_738_p2;
reg  signed [31:0] H_Result_reg_1493;
wire    ap_CS_fsm_state129;
wire  signed [31:0] W_Result_fu_744_p2;
reg  signed [31:0] W_Result_reg_1500;
reg  signed [31:0] Parameters_load_18_reg_1507;
wire    ap_CS_fsm_state130;
wire  signed [31:0] tmp3_fu_750_p2;
reg  signed [31:0] tmp3_reg_1513;
wire   [31:0] tmp_23_fu_754_p2;
reg   [31:0] tmp_23_reg_1518;
wire    ap_CS_fsm_state131;
wire   [0:0] tmp_25_fu_758_p2;
reg   [0:0] tmp_25_reg_1523;
reg   [0:0] p_Result_s_reg_1528;
wire    ap_CS_fsm_state137;
reg   [7:0] loc_V_reg_1533;
wire   [22:0] loc_V_1_fu_786_p1;
reg   [22:0] loc_V_1_reg_1539;
wire   [31:0] p_Val2_2_fu_883_p3;
reg   [31:0] p_Val2_2_reg_1544;
wire    ap_CS_fsm_state138;
wire   [0:0] tmp_24_fu_906_p2;
reg   [0:0] tmp_24_reg_1550;
reg    ap_block_state141;
reg   [31:0] Parameters_load_19_reg_1555;
wire   [30:0] idx_5_fu_921_p2;
reg   [30:0] idx_5_reg_1563;
wire    ap_CS_fsm_state142;
wire   [0:0] tmp_26_fu_916_p2;
wire   [31:0] Bias_q0;
reg   [31:0] Bias_load_reg_1573;
wire    ap_CS_fsm_state143;
wire   [30:0] idx2_1_fu_941_p2;
reg   [30:0] idx2_1_reg_1581;
wire    ap_CS_fsm_state144;
wire   [31:0] tmp_29_fu_947_p2;
reg   [31:0] tmp_29_reg_1586;
wire   [0:0] tmp_28_fu_936_p2;
wire   [30:0] idx3_1_fu_961_p2;
reg   [30:0] idx3_1_reg_1594;
wire    ap_CS_fsm_state145;
wire   [31:0] tmp_31_fu_967_p2;
reg   [31:0] tmp_31_reg_1599;
wire   [0:0] tmp_30_fu_956_p2;
wire   [30:0] k_1_fu_981_p2;
reg   [30:0] k_1_reg_1607;
wire    ap_CS_fsm_state146;
wire   [31:0] tmp_33_fu_987_p2;
reg   [31:0] tmp_33_reg_1612;
wire   [0:0] tmp_32_fu_976_p2;
wire   [31:0] tmp_34_fu_993_p2;
reg   [31:0] tmp_34_reg_1617;
wire   [30:0] i_1_fu_1009_p2;
reg   [30:0] i_1_reg_1625;
wire    ap_CS_fsm_state147;
wire  signed [31:0] tmp_41_fu_1020_p2;
reg  signed [31:0] tmp_41_reg_1630;
wire   [0:0] tmp_40_fu_1003_p2;
wire  signed [31:0] tmp_fu_1025_p2;
reg  signed [31:0] tmp_reg_1635;
wire   [31:0] R_Row_fu_1030_p2;
reg   [31:0] R_Row_reg_1640;
wire    ap_CS_fsm_state148;
wire   [31:0] tmp9_fu_1034_p2;
reg   [31:0] tmp9_reg_1645;
wire   [30:0] j_1_fu_1047_p2;
reg   [30:0] j_1_reg_1653;
wire    ap_CS_fsm_state149;
wire   [0:0] tmp_42_fu_1042_p2;
wire   [31:0] Input_q0;
reg   [31:0] Input_load_reg_1668;
wire    ap_CS_fsm_state150;
wire   [31:0] Weight_q0;
reg   [31:0] Weight_load_reg_1673;
wire   [31:0] grp_fu_541_p2;
wire    ap_CS_fsm_state159;
wire   [31:0] Convolve_value_3_fu_1078_p3;
reg   [31:0] Convolve_value_3_reg_1683;
wire    ap_CS_fsm_state163;
wire   [31:0] Convolve_value_5_fu_1133_p3;
reg   [31:0] Convolve_value_5_reg_1691;
wire    ap_CS_fsm_state164;
wire    ap_CS_fsm_state165;
reg   [0:0] p_Result_1_reg_1701;
wire    ap_CS_fsm_state169;
wire   [31:0] p_Val2_7_fu_1265_p3;
reg   [31:0] p_Val2_7_reg_1706;
reg   [12:0] Input_address0;
reg    Input_ce0;
reg    Input_we0;
reg   [12:0] Weight_address0;
reg    Weight_ce0;
reg    Weight_we0;
reg   [9:0] Bias_address0;
reg    Bias_ce0;
reg    Bias_we0;
reg   [4:0] Parameters_address0;
reg    Parameters_ce0;
reg    Parameters_we0;
reg   [4:0] Parameters_address1;
reg    Parameters_ce1;
reg    grp_Axi_Transfer_fu_500_ap_start;
wire    grp_Axi_Transfer_fu_500_ap_done;
wire    grp_Axi_Transfer_fu_500_ap_idle;
wire    grp_Axi_Transfer_fu_500_ap_ready;
wire    grp_Axi_Transfer_fu_500_in_data_TVALID;
wire    grp_Axi_Transfer_fu_500_in_data_TREADY;
wire   [31:0] grp_Axi_Transfer_fu_500_out_data_TDATA;
wire    grp_Axi_Transfer_fu_500_out_data_TVALID;
wire    grp_Axi_Transfer_fu_500_out_data_TREADY;
wire   [3:0] grp_Axi_Transfer_fu_500_out_data_TKEEP;
wire   [3:0] grp_Axi_Transfer_fu_500_out_data_TSTRB;
wire   [0:0] grp_Axi_Transfer_fu_500_out_data_TUSER;
wire   [0:0] grp_Axi_Transfer_fu_500_out_data_TLAST;
wire   [0:0] grp_Axi_Transfer_fu_500_out_data_TID;
wire   [0:0] grp_Axi_Transfer_fu_500_out_data_TDEST;
reg   [31:0] grp_Axi_Transfer_fu_500_value_r;
reg   [0:0] grp_Axi_Transfer_fu_500_loop_r;
reg   [4:0] idx_reg_350;
wire    ap_CS_fsm_state2;
reg    ap_block_state4;
reg   [30:0] idx1_reg_362;
wire    ap_CS_fsm_state36;
reg   [30:0] idx2_reg_374;
wire    ap_CS_fsm_state62;
reg   [30:0] idx3_reg_386;
wire    ap_CS_fsm_state90;
reg   [30:0] idx4_reg_398;
reg   [30:0] idx5_reg_409;
reg   [30:0] idx6_reg_420;
reg    ap_block_state170;
reg   [30:0] k_reg_431;
reg   [31:0] Convolve_value_reg_442;
reg   [31:0] Convolve_value_1_reg_454;
reg   [30:0] i_reg_466;
reg   [31:0] Convolve_value_2_reg_477;
reg   [30:0] j_reg_489;
wire   [31:0] p_Val2_4_fu_896_p3;
wire   [31:0] p_Val2_9_fu_1278_p3;
wire   [63:0] tmp_9_fu_616_p1;
wire   [63:0] tmp_5_fu_648_p1;
wire   [63:0] tmp_13_fu_668_p1;
wire   [63:0] tmp_18_fu_712_p1;
wire   [63:0] tmp_27_fu_927_p1;
wire  signed [63:0] tmp_43_fu_1063_p1;
wire  signed [63:0] tmp_45_fu_1073_p1;
reg   [31:0] Precision_1_fu_138;
wire   [0:0] tmp_15_fu_693_p2;
reg   [31:0] Relu_Activation_1_fu_142;
wire    ap_CS_fsm_state9;
reg    ap_block_state140;
reg   [31:0] grp_fu_541_p0;
reg   [31:0] grp_fu_541_p1;
wire    ap_CS_fsm_state155;
reg   [31:0] grp_fu_547_p0;
reg   [31:0] grp_fu_547_p1;
wire    ap_CS_fsm_state151;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state74;
reg   [31:0] grp_fu_555_p0;
wire    ap_CS_fsm_state132;
wire   [31:0] idx1_cast_fu_627_p1;
wire   [31:0] idx2_cast_fu_653_p1;
wire  signed [31:0] tmp1_fu_673_p1;
wire  signed [31:0] tmp2_fu_679_p0;
wire   [31:0] idx3_cast_fu_689_p1;
wire  signed [31:0] tmp_19_fu_717_p0;
wire   [31:0] grp_fu_723_p0;
wire   [31:0] grp_fu_732_p0;
wire   [31:0] grp_fu_723_p2;
wire   [31:0] grp_fu_732_p2;
wire   [31:0] p_Val2_s_fu_764_p1;
wire   [24:0] tmp_3_i_i_i2_fu_790_p4;
wire   [8:0] tmp_i_i_i_i2_cast8_fu_803_p1;
wire   [8:0] sh_assign_fu_806_p2;
wire   [7:0] tmp_5_i_i_i3_fu_820_p2;
wire   [0:0] isNeg_fu_812_p3;
wire  signed [8:0] tmp_5_i_i_i3_cast_fu_825_p1;
wire   [8:0] sh_assign_1_fu_829_p3;
wire  signed [31:0] sh_assign_7_cast_fu_837_p1;
wire  signed [24:0] sh_assign_7_cast_cas_fu_841_p1;
wire   [78:0] tmp_3_i_i_i2_cast9_fu_799_p1;
wire   [78:0] tmp_7_i_i_i3_fu_845_p1;
wire   [24:0] tmp_8_i_i_i3_fu_849_p2;
wire   [0:0] tmp_51_fu_861_p3;
wire   [78:0] tmp_i_i_i3_fu_855_p2;
wire   [31:0] tmp_36_fu_869_p1;
wire   [31:0] tmp_47_fu_873_p4;
wire   [31:0] p_Val2_6_i_i_i3_fu_891_p2;
wire   [31:0] idx4_cast_fu_912_p1;
wire   [31:0] idx5_cast_fu_932_p1;
wire   [30:0] tmp_29_fu_947_p1;
wire   [31:0] idx6_cast_fu_952_p1;
wire   [30:0] tmp_31_fu_967_p1;
wire   [31:0] k_cast_fu_972_p1;
wire  signed [31:0] tmp_33_fu_987_p0;
wire   [30:0] tmp_33_fu_987_p1;
wire   [30:0] tmp_34_fu_993_p1;
wire   [31:0] i_cast_fu_999_p1;
wire   [31:0] tmp4_fu_1015_p2;
wire   [31:0] j_cast_fu_1038_p1;
wire   [31:0] tmp5_fu_1053_p2;
wire   [31:0] Index_fu_1058_p2;
wire   [31:0] tmp_44_fu_1068_p2;
wire   [31:0] Convolve_value_3_to_s_fu_1085_p1;
wire   [7:0] tmp_35_fu_1088_p4;
wire   [22:0] tmp_54_fu_1098_p1;
wire   [0:0] notrhs_fu_1108_p2;
wire   [0:0] notlhs_fu_1102_p2;
wire   [0:0] tmp_37_fu_1114_p2;
wire   [0:0] tmp_38_fu_560_p2;
wire   [0:0] tmp_39_fu_1120_p2;
wire   [31:0] Convolve_value_4_fu_1126_p3;
wire   [31:0] p_Val2_5_fu_1143_p1;
wire   [22:0] loc_V_3_fu_1165_p1;
wire   [24:0] tmp_3_i_i_i3_fu_1169_p4;
wire   [7:0] loc_V_2_fu_1155_p4;
wire   [8:0] tmp_i_i_i_i3_cast6_fu_1183_p1;
wire   [8:0] sh_assign_2_fu_1187_p2;
wire   [7:0] tmp_5_i_i_i4_fu_1201_p2;
wire   [0:0] isNeg_1_fu_1193_p3;
wire  signed [8:0] tmp_5_i_i_i4_cast_fu_1207_p1;
wire   [8:0] sh_assign_3_fu_1211_p3;
wire  signed [31:0] sh_assign_9_cast_fu_1219_p1;
wire  signed [24:0] sh_assign_9_cast_cas_fu_1223_p1;
wire   [78:0] tmp_3_i_i_i3_cast7_fu_1179_p1;
wire   [78:0] tmp_7_i_i_i4_fu_1227_p1;
wire   [24:0] tmp_8_i_i_i4_fu_1231_p2;
wire   [0:0] tmp_58_fu_1243_p3;
wire   [78:0] tmp_i_i_i4_fu_1237_p2;
wire   [31:0] tmp_48_fu_1251_p1;
wire   [31:0] tmp_49_fu_1255_p4;
wire   [31:0] p_Val2_6_i_i_i4_fu_1273_p2;
reg    grp_fu_555_ce;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state133;
wire    ap_CS_fsm_state134;
wire    ap_CS_fsm_state135;
wire    ap_CS_fsm_state136;
wire   [0:0] exitcond_fu_604_p2;
wire   [0:0] tmp_10_fu_657_p2;
reg    grp_fu_723_ap_start;
wire    grp_fu_723_ap_done;
reg    grp_fu_732_ap_start;
wire    grp_fu_732_ap_done;
reg   [169:0] ap_NS_fsm;
reg    ap_block_state139;

// power-on initialization
initial begin
#0 in_data_data_V_0_sel_rd = 1'b0;
#0 in_data_data_V_0_sel_wr = 1'b0;
#0 in_data_data_V_0_state = 2'd0;
#0 in_data_keep_V_0_sel_rd = 1'b0;
#0 in_data_keep_V_0_sel_wr = 1'b0;
#0 in_data_keep_V_0_state = 2'd0;
#0 in_data_strb_V_0_sel_rd = 1'b0;
#0 in_data_strb_V_0_sel_wr = 1'b0;
#0 in_data_strb_V_0_state = 2'd0;
#0 in_data_user_V_0_sel_rd = 1'b0;
#0 in_data_user_V_0_sel_wr = 1'b0;
#0 in_data_user_V_0_state = 2'd0;
#0 in_data_last_V_0_sel_rd = 1'b0;
#0 in_data_last_V_0_sel_wr = 1'b0;
#0 in_data_last_V_0_state = 2'd0;
#0 in_data_id_V_0_sel_rd = 1'b0;
#0 in_data_id_V_0_sel_wr = 1'b0;
#0 in_data_id_V_0_state = 2'd0;
#0 in_data_dest_V_0_sel_rd = 1'b0;
#0 in_data_dest_V_0_sel_wr = 1'b0;
#0 in_data_dest_V_0_state = 2'd0;
#0 out_data_data_V_1_sel_rd = 1'b0;
#0 out_data_data_V_1_sel_wr = 1'b0;
#0 out_data_data_V_1_state = 2'd0;
#0 out_data_keep_V_1_sel_rd = 1'b0;
#0 out_data_keep_V_1_sel_wr = 1'b0;
#0 out_data_keep_V_1_state = 2'd0;
#0 out_data_strb_V_1_sel_rd = 1'b0;
#0 out_data_strb_V_1_sel_wr = 1'b0;
#0 out_data_strb_V_1_state = 2'd0;
#0 out_data_user_V_1_sel_rd = 1'b0;
#0 out_data_user_V_1_sel_wr = 1'b0;
#0 out_data_user_V_1_state = 2'd0;
#0 out_data_last_V_1_sel_rd = 1'b0;
#0 out_data_last_V_1_sel_wr = 1'b0;
#0 out_data_last_V_1_state = 2'd0;
#0 out_data_id_V_1_sel_rd = 1'b0;
#0 out_data_id_V_1_sel_wr = 1'b0;
#0 out_data_id_V_1_state = 2'd0;
#0 out_data_dest_V_1_sel_rd = 1'b0;
#0 out_data_dest_V_1_sel_wr = 1'b0;
#0 out_data_dest_V_1_state = 2'd0;
#0 ap_CS_fsm = 170'd1;
end

cnn_Input #(
    .DataWidth( 32 ),
    .AddressRange( 6000 ),
    .AddressWidth( 13 ))
Input_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Input_address0),
    .ce0(Input_ce0),
    .we0(Input_we0),
    .d0(reg_587),
    .q0(Input_q0)
);

cnn_Weight #(
    .DataWidth( 32 ),
    .AddressRange( 5000 ),
    .AddressWidth( 13 ))
Weight_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Weight_address0),
    .ce0(Weight_ce0),
    .we0(Weight_we0),
    .d0(reg_587),
    .q0(Weight_q0)
);

cnn_Bias #(
    .DataWidth( 32 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
Bias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Bias_address0),
    .ce0(Bias_ce0),
    .we0(Bias_we0),
    .d0(reg_587),
    .q0(Bias_q0)
);

cnn_Parameters #(
    .DataWidth( 32 ),
    .AddressRange( 17 ),
    .AddressWidth( 5 ))
Parameters_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Parameters_address0),
    .ce0(Parameters_ce0),
    .we0(Parameters_we0),
    .d0(grp_Axi_Transfer_fu_500_ap_return),
    .q0(Parameters_q0),
    .address1(Parameters_address1),
    .ce1(Parameters_ce1),
    .q1(Parameters_q1)
);

Axi_Transfer grp_Axi_Transfer_fu_500(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Axi_Transfer_fu_500_ap_start),
    .ap_done(grp_Axi_Transfer_fu_500_ap_done),
    .ap_idle(grp_Axi_Transfer_fu_500_ap_idle),
    .ap_ready(grp_Axi_Transfer_fu_500_ap_ready),
    .in_data_TDATA(in_data_data_V_0_data_out),
    .in_data_TVALID(grp_Axi_Transfer_fu_500_in_data_TVALID),
    .in_data_TREADY(grp_Axi_Transfer_fu_500_in_data_TREADY),
    .in_data_TKEEP(in_data_keep_V_0_data_out),
    .in_data_TSTRB(in_data_strb_V_0_data_out),
    .in_data_TUSER(in_data_user_V_0_data_out),
    .in_data_TLAST(in_data_last_V_0_data_out),
    .in_data_TID(in_data_id_V_0_data_out),
    .in_data_TDEST(in_data_dest_V_0_data_out),
    .out_data_TDATA(grp_Axi_Transfer_fu_500_out_data_TDATA),
    .out_data_TVALID(grp_Axi_Transfer_fu_500_out_data_TVALID),
    .out_data_TREADY(grp_Axi_Transfer_fu_500_out_data_TREADY),
    .out_data_TKEEP(grp_Axi_Transfer_fu_500_out_data_TKEEP),
    .out_data_TSTRB(grp_Axi_Transfer_fu_500_out_data_TSTRB),
    .out_data_TUSER(grp_Axi_Transfer_fu_500_out_data_TUSER),
    .out_data_TLAST(grp_Axi_Transfer_fu_500_out_data_TLAST),
    .out_data_TID(grp_Axi_Transfer_fu_500_out_data_TID),
    .out_data_TDEST(grp_Axi_Transfer_fu_500_out_data_TDEST),
    .value_r(grp_Axi_Transfer_fu_500_value_r),
    .loop_r(grp_Axi_Transfer_fu_500_loop_r),
    .ap_return(grp_Axi_Transfer_fu_500_ap_return),
    .in_data_TDATA_blk_n(grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n),
    .out_data_TDATA_blk_n(grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n)
);

cnn_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32nbkb_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_541_p0),
    .din1(grp_fu_541_p1),
    .ce(1'b1),
    .dout(grp_fu_541_p2)
);

cnn_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32ncud_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_547_p0),
    .din1(grp_fu_547_p1),
    .ce(1'b1),
    .dout(grp_fu_547_p2)
);

cnn_fdiv_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fdiv_32ns_32ndEe_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_582),
    .din1(Precision_reg_1395),
    .ce(1'b1),
    .dout(grp_fu_551_p2)
);

cnn_sitofp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_sitofp_32ns_3eOg_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_555_p0),
    .ce(grp_fu_555_ce),
    .dout(grp_fu_555_p1)
);

cnn_fcmp_32ns_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32nfYi_U21(
    .din0(Convolve_value_3_reg_1683),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(tmp_38_fu_560_p2)
);

cnn_sdiv_32ns_32sg8j #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_sdiv_32ns_32sg8j_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_723_ap_start),
    .done(grp_fu_723_ap_done),
    .din0(grp_fu_723_p0),
    .din1(Parameters_load_14_reg_1458),
    .ce(1'b1),
    .dout(grp_fu_723_p2)
);

cnn_sdiv_32ns_32sg8j #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_sdiv_32ns_32sg8j_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_732_ap_start),
    .done(grp_fu_732_ap_done),
    .din0(grp_fu_732_p0),
    .din1(Parameters_q1),
    .ce(1'b1),
    .dout(grp_fu_732_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_data_V_0_ack_out == 1'b1) & (in_data_data_V_0_vld_out == 1'b1))) begin
            in_data_data_V_0_sel_rd <= ~in_data_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_data_V_0_ack_in == 1'b1) & (in_data_data_V_0_vld_in == 1'b1))) begin
            in_data_data_V_0_sel_wr <= ~in_data_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_data_data_V_0_vld_in == 1'b0) & (in_data_data_V_0_state == 2'd2)) | ((in_data_data_V_0_vld_in == 1'b0) & (in_data_data_V_0_ack_out == 1'b1) & (in_data_data_V_0_state == 2'd3)))) begin
            in_data_data_V_0_state <= 2'd2;
        end else if ((((in_data_data_V_0_ack_out == 1'b0) & (in_data_data_V_0_state == 2'd1)) | ((in_data_data_V_0_ack_out == 1'b0) & (in_data_data_V_0_vld_in == 1'b1) & (in_data_data_V_0_state == 2'd3)))) begin
            in_data_data_V_0_state <= 2'd1;
        end else if (((~((in_data_data_V_0_vld_in == 1'b0) & (in_data_data_V_0_ack_out == 1'b1)) & ~((in_data_data_V_0_ack_out == 1'b0) & (in_data_data_V_0_vld_in == 1'b1)) & (in_data_data_V_0_state == 2'd3)) | ((in_data_data_V_0_ack_out == 1'b1) & (in_data_data_V_0_state == 2'd1)) | ((in_data_data_V_0_vld_in == 1'b1) & (in_data_data_V_0_state == 2'd2)))) begin
            in_data_data_V_0_state <= 2'd3;
        end else begin
            in_data_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_dest_V_0_ack_out == 1'b1) & (in_data_dest_V_0_vld_out == 1'b1))) begin
            in_data_dest_V_0_sel_rd <= ~in_data_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_dest_V_0_ack_in == 1'b1) & (in_data_dest_V_0_vld_in == 1'b1))) begin
            in_data_dest_V_0_sel_wr <= ~in_data_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_dest_V_0_state <= 2'd0;
    end else begin
        if ((((in_data_dest_V_0_vld_in == 1'b0) & (in_data_dest_V_0_state == 2'd2)) | ((in_data_dest_V_0_vld_in == 1'b0) & (in_data_dest_V_0_state == 2'd3) & (in_data_dest_V_0_ack_out == 1'b1)))) begin
            in_data_dest_V_0_state <= 2'd2;
        end else if ((((in_data_dest_V_0_ack_out == 1'b0) & (in_data_dest_V_0_state == 2'd1)) | ((in_data_dest_V_0_ack_out == 1'b0) & (in_data_dest_V_0_state == 2'd3) & (in_data_dest_V_0_vld_in == 1'b1)))) begin
            in_data_dest_V_0_state <= 2'd1;
        end else if (((~((in_data_dest_V_0_vld_in == 1'b0) & (in_data_dest_V_0_ack_out == 1'b1)) & ~((in_data_dest_V_0_ack_out == 1'b0) & (in_data_dest_V_0_vld_in == 1'b1)) & (in_data_dest_V_0_state == 2'd3)) | ((in_data_dest_V_0_state == 2'd1) & (in_data_dest_V_0_ack_out == 1'b1)) | ((in_data_dest_V_0_state == 2'd2) & (in_data_dest_V_0_vld_in == 1'b1)))) begin
            in_data_dest_V_0_state <= 2'd3;
        end else begin
            in_data_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_id_V_0_ack_out == 1'b1) & (in_data_id_V_0_vld_out == 1'b1))) begin
            in_data_id_V_0_sel_rd <= ~in_data_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_id_V_0_ack_in == 1'b1) & (in_data_id_V_0_vld_in == 1'b1))) begin
            in_data_id_V_0_sel_wr <= ~in_data_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_id_V_0_state <= 2'd0;
    end else begin
        if ((((in_data_id_V_0_vld_in == 1'b0) & (in_data_id_V_0_state == 2'd2)) | ((in_data_id_V_0_vld_in == 1'b0) & (in_data_id_V_0_state == 2'd3) & (in_data_id_V_0_ack_out == 1'b1)))) begin
            in_data_id_V_0_state <= 2'd2;
        end else if ((((in_data_id_V_0_ack_out == 1'b0) & (in_data_id_V_0_state == 2'd1)) | ((in_data_id_V_0_ack_out == 1'b0) & (in_data_id_V_0_state == 2'd3) & (in_data_id_V_0_vld_in == 1'b1)))) begin
            in_data_id_V_0_state <= 2'd1;
        end else if (((~((in_data_id_V_0_vld_in == 1'b0) & (in_data_id_V_0_ack_out == 1'b1)) & ~((in_data_id_V_0_ack_out == 1'b0) & (in_data_id_V_0_vld_in == 1'b1)) & (in_data_id_V_0_state == 2'd3)) | ((in_data_id_V_0_state == 2'd1) & (in_data_id_V_0_ack_out == 1'b1)) | ((in_data_id_V_0_state == 2'd2) & (in_data_id_V_0_vld_in == 1'b1)))) begin
            in_data_id_V_0_state <= 2'd3;
        end else begin
            in_data_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_keep_V_0_ack_out == 1'b1) & (in_data_keep_V_0_vld_out == 1'b1))) begin
            in_data_keep_V_0_sel_rd <= ~in_data_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_keep_V_0_ack_in == 1'b1) & (in_data_keep_V_0_vld_in == 1'b1))) begin
            in_data_keep_V_0_sel_wr <= ~in_data_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_keep_V_0_state <= 2'd0;
    end else begin
        if ((((in_data_keep_V_0_vld_in == 1'b0) & (in_data_keep_V_0_state == 2'd2)) | ((in_data_keep_V_0_vld_in == 1'b0) & (in_data_keep_V_0_state == 2'd3) & (in_data_keep_V_0_ack_out == 1'b1)))) begin
            in_data_keep_V_0_state <= 2'd2;
        end else if ((((in_data_keep_V_0_ack_out == 1'b0) & (in_data_keep_V_0_state == 2'd1)) | ((in_data_keep_V_0_ack_out == 1'b0) & (in_data_keep_V_0_state == 2'd3) & (in_data_keep_V_0_vld_in == 1'b1)))) begin
            in_data_keep_V_0_state <= 2'd1;
        end else if (((~((in_data_keep_V_0_vld_in == 1'b0) & (in_data_keep_V_0_ack_out == 1'b1)) & ~((in_data_keep_V_0_ack_out == 1'b0) & (in_data_keep_V_0_vld_in == 1'b1)) & (in_data_keep_V_0_state == 2'd3)) | ((in_data_keep_V_0_state == 2'd1) & (in_data_keep_V_0_ack_out == 1'b1)) | ((in_data_keep_V_0_state == 2'd2) & (in_data_keep_V_0_vld_in == 1'b1)))) begin
            in_data_keep_V_0_state <= 2'd3;
        end else begin
            in_data_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_last_V_0_ack_out == 1'b1) & (in_data_last_V_0_vld_out == 1'b1))) begin
            in_data_last_V_0_sel_rd <= ~in_data_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_last_V_0_ack_in == 1'b1) & (in_data_last_V_0_vld_in == 1'b1))) begin
            in_data_last_V_0_sel_wr <= ~in_data_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_last_V_0_state <= 2'd0;
    end else begin
        if ((((in_data_last_V_0_vld_in == 1'b0) & (in_data_last_V_0_state == 2'd2)) | ((in_data_last_V_0_vld_in == 1'b0) & (in_data_last_V_0_state == 2'd3) & (in_data_last_V_0_ack_out == 1'b1)))) begin
            in_data_last_V_0_state <= 2'd2;
        end else if ((((in_data_last_V_0_ack_out == 1'b0) & (in_data_last_V_0_state == 2'd1)) | ((in_data_last_V_0_ack_out == 1'b0) & (in_data_last_V_0_state == 2'd3) & (in_data_last_V_0_vld_in == 1'b1)))) begin
            in_data_last_V_0_state <= 2'd1;
        end else if (((~((in_data_last_V_0_vld_in == 1'b0) & (in_data_last_V_0_ack_out == 1'b1)) & ~((in_data_last_V_0_ack_out == 1'b0) & (in_data_last_V_0_vld_in == 1'b1)) & (in_data_last_V_0_state == 2'd3)) | ((in_data_last_V_0_state == 2'd1) & (in_data_last_V_0_ack_out == 1'b1)) | ((in_data_last_V_0_state == 2'd2) & (in_data_last_V_0_vld_in == 1'b1)))) begin
            in_data_last_V_0_state <= 2'd3;
        end else begin
            in_data_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_strb_V_0_ack_out == 1'b1) & (in_data_strb_V_0_vld_out == 1'b1))) begin
            in_data_strb_V_0_sel_rd <= ~in_data_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_strb_V_0_ack_in == 1'b1) & (in_data_strb_V_0_vld_in == 1'b1))) begin
            in_data_strb_V_0_sel_wr <= ~in_data_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_strb_V_0_state <= 2'd0;
    end else begin
        if ((((in_data_strb_V_0_vld_in == 1'b0) & (in_data_strb_V_0_state == 2'd2)) | ((in_data_strb_V_0_vld_in == 1'b0) & (in_data_strb_V_0_state == 2'd3) & (in_data_strb_V_0_ack_out == 1'b1)))) begin
            in_data_strb_V_0_state <= 2'd2;
        end else if ((((in_data_strb_V_0_ack_out == 1'b0) & (in_data_strb_V_0_state == 2'd1)) | ((in_data_strb_V_0_ack_out == 1'b0) & (in_data_strb_V_0_state == 2'd3) & (in_data_strb_V_0_vld_in == 1'b1)))) begin
            in_data_strb_V_0_state <= 2'd1;
        end else if (((~((in_data_strb_V_0_vld_in == 1'b0) & (in_data_strb_V_0_ack_out == 1'b1)) & ~((in_data_strb_V_0_ack_out == 1'b0) & (in_data_strb_V_0_vld_in == 1'b1)) & (in_data_strb_V_0_state == 2'd3)) | ((in_data_strb_V_0_state == 2'd1) & (in_data_strb_V_0_ack_out == 1'b1)) | ((in_data_strb_V_0_state == 2'd2) & (in_data_strb_V_0_vld_in == 1'b1)))) begin
            in_data_strb_V_0_state <= 2'd3;
        end else begin
            in_data_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_user_V_0_ack_out == 1'b1) & (in_data_user_V_0_vld_out == 1'b1))) begin
            in_data_user_V_0_sel_rd <= ~in_data_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_user_V_0_ack_in == 1'b1) & (in_data_user_V_0_vld_in == 1'b1))) begin
            in_data_user_V_0_sel_wr <= ~in_data_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_user_V_0_state <= 2'd0;
    end else begin
        if ((((in_data_user_V_0_vld_in == 1'b0) & (in_data_user_V_0_state == 2'd2)) | ((in_data_user_V_0_vld_in == 1'b0) & (in_data_user_V_0_state == 2'd3) & (in_data_user_V_0_ack_out == 1'b1)))) begin
            in_data_user_V_0_state <= 2'd2;
        end else if ((((in_data_user_V_0_ack_out == 1'b0) & (in_data_user_V_0_state == 2'd1)) | ((in_data_user_V_0_ack_out == 1'b0) & (in_data_user_V_0_state == 2'd3) & (in_data_user_V_0_vld_in == 1'b1)))) begin
            in_data_user_V_0_state <= 2'd1;
        end else if (((~((in_data_user_V_0_vld_in == 1'b0) & (in_data_user_V_0_ack_out == 1'b1)) & ~((in_data_user_V_0_ack_out == 1'b0) & (in_data_user_V_0_vld_in == 1'b1)) & (in_data_user_V_0_state == 2'd3)) | ((in_data_user_V_0_state == 2'd1) & (in_data_user_V_0_ack_out == 1'b1)) | ((in_data_user_V_0_state == 2'd2) & (in_data_user_V_0_vld_in == 1'b1)))) begin
            in_data_user_V_0_state <= 2'd3;
        end else begin
            in_data_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_data_V_1_ack_out == 1'b1) & (out_data_data_V_1_vld_out == 1'b1))) begin
            out_data_data_V_1_sel_rd <= ~out_data_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_data_V_1_ack_in == 1'b1) & (out_data_data_V_1_vld_in == 1'b1))) begin
            out_data_data_V_1_sel_wr <= ~out_data_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_data_V_1_vld_in == 1'b0) & (out_data_data_V_1_state == 2'd2)) | ((out_data_data_V_1_vld_in == 1'b0) & (out_data_data_V_1_state == 2'd3) & (out_data_data_V_1_ack_out == 1'b1)))) begin
            out_data_data_V_1_state <= 2'd2;
        end else if ((((out_data_data_V_1_ack_out == 1'b0) & (out_data_data_V_1_state == 2'd1)) | ((out_data_data_V_1_ack_out == 1'b0) & (out_data_data_V_1_state == 2'd3) & (out_data_data_V_1_vld_in == 1'b1)))) begin
            out_data_data_V_1_state <= 2'd1;
        end else if (((~((out_data_data_V_1_vld_in == 1'b0) & (out_data_data_V_1_ack_out == 1'b1)) & ~((out_data_data_V_1_ack_out == 1'b0) & (out_data_data_V_1_vld_in == 1'b1)) & (out_data_data_V_1_state == 2'd3)) | ((out_data_data_V_1_state == 2'd1) & (out_data_data_V_1_ack_out == 1'b1)) | ((out_data_data_V_1_state == 2'd2) & (out_data_data_V_1_vld_in == 1'b1)))) begin
            out_data_data_V_1_state <= 2'd3;
        end else begin
            out_data_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_dest_V_1_ack_out == 1'b1) & (out_data_dest_V_1_vld_out == 1'b1))) begin
            out_data_dest_V_1_sel_rd <= ~out_data_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_dest_V_1_ack_in == 1'b1) & (out_data_dest_V_1_vld_in == 1'b1))) begin
            out_data_dest_V_1_sel_wr <= ~out_data_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_dest_V_1_vld_in == 1'b0) & (out_data_dest_V_1_state == 2'd2)) | ((out_data_dest_V_1_vld_in == 1'b0) & (out_data_dest_V_1_state == 2'd3) & (out_data_dest_V_1_ack_out == 1'b1)))) begin
            out_data_dest_V_1_state <= 2'd2;
        end else if ((((out_data_dest_V_1_ack_out == 1'b0) & (out_data_dest_V_1_state == 2'd1)) | ((out_data_dest_V_1_ack_out == 1'b0) & (out_data_dest_V_1_state == 2'd3) & (out_data_dest_V_1_vld_in == 1'b1)))) begin
            out_data_dest_V_1_state <= 2'd1;
        end else if (((~((out_data_dest_V_1_vld_in == 1'b0) & (out_data_dest_V_1_ack_out == 1'b1)) & ~((out_data_dest_V_1_ack_out == 1'b0) & (out_data_dest_V_1_vld_in == 1'b1)) & (out_data_dest_V_1_state == 2'd3)) | ((out_data_dest_V_1_state == 2'd1) & (out_data_dest_V_1_ack_out == 1'b1)) | ((out_data_dest_V_1_state == 2'd2) & (out_data_dest_V_1_vld_in == 1'b1)))) begin
            out_data_dest_V_1_state <= 2'd3;
        end else begin
            out_data_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_id_V_1_ack_out == 1'b1) & (out_data_id_V_1_vld_out == 1'b1))) begin
            out_data_id_V_1_sel_rd <= ~out_data_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_id_V_1_ack_in == 1'b1) & (out_data_id_V_1_vld_in == 1'b1))) begin
            out_data_id_V_1_sel_wr <= ~out_data_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_id_V_1_vld_in == 1'b0) & (out_data_id_V_1_state == 2'd2)) | ((out_data_id_V_1_vld_in == 1'b0) & (out_data_id_V_1_state == 2'd3) & (out_data_id_V_1_ack_out == 1'b1)))) begin
            out_data_id_V_1_state <= 2'd2;
        end else if ((((out_data_id_V_1_ack_out == 1'b0) & (out_data_id_V_1_state == 2'd1)) | ((out_data_id_V_1_ack_out == 1'b0) & (out_data_id_V_1_state == 2'd3) & (out_data_id_V_1_vld_in == 1'b1)))) begin
            out_data_id_V_1_state <= 2'd1;
        end else if (((~((out_data_id_V_1_vld_in == 1'b0) & (out_data_id_V_1_ack_out == 1'b1)) & ~((out_data_id_V_1_ack_out == 1'b0) & (out_data_id_V_1_vld_in == 1'b1)) & (out_data_id_V_1_state == 2'd3)) | ((out_data_id_V_1_state == 2'd1) & (out_data_id_V_1_ack_out == 1'b1)) | ((out_data_id_V_1_state == 2'd2) & (out_data_id_V_1_vld_in == 1'b1)))) begin
            out_data_id_V_1_state <= 2'd3;
        end else begin
            out_data_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_keep_V_1_ack_out == 1'b1) & (out_data_keep_V_1_vld_out == 1'b1))) begin
            out_data_keep_V_1_sel_rd <= ~out_data_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_keep_V_1_ack_in == 1'b1) & (out_data_keep_V_1_vld_in == 1'b1))) begin
            out_data_keep_V_1_sel_wr <= ~out_data_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_keep_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_keep_V_1_vld_in == 1'b0) & (out_data_keep_V_1_state == 2'd2)) | ((out_data_keep_V_1_vld_in == 1'b0) & (out_data_keep_V_1_state == 2'd3) & (out_data_keep_V_1_ack_out == 1'b1)))) begin
            out_data_keep_V_1_state <= 2'd2;
        end else if ((((out_data_keep_V_1_ack_out == 1'b0) & (out_data_keep_V_1_state == 2'd1)) | ((out_data_keep_V_1_ack_out == 1'b0) & (out_data_keep_V_1_state == 2'd3) & (out_data_keep_V_1_vld_in == 1'b1)))) begin
            out_data_keep_V_1_state <= 2'd1;
        end else if (((~((out_data_keep_V_1_vld_in == 1'b0) & (out_data_keep_V_1_ack_out == 1'b1)) & ~((out_data_keep_V_1_ack_out == 1'b0) & (out_data_keep_V_1_vld_in == 1'b1)) & (out_data_keep_V_1_state == 2'd3)) | ((out_data_keep_V_1_state == 2'd1) & (out_data_keep_V_1_ack_out == 1'b1)) | ((out_data_keep_V_1_state == 2'd2) & (out_data_keep_V_1_vld_in == 1'b1)))) begin
            out_data_keep_V_1_state <= 2'd3;
        end else begin
            out_data_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_last_V_1_ack_out == 1'b1) & (out_data_last_V_1_vld_out == 1'b1))) begin
            out_data_last_V_1_sel_rd <= ~out_data_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_last_V_1_ack_in == 1'b1) & (out_data_last_V_1_vld_in == 1'b1))) begin
            out_data_last_V_1_sel_wr <= ~out_data_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_last_V_1_vld_in == 1'b0) & (out_data_last_V_1_state == 2'd2)) | ((out_data_last_V_1_vld_in == 1'b0) & (out_data_last_V_1_state == 2'd3) & (out_data_last_V_1_ack_out == 1'b1)))) begin
            out_data_last_V_1_state <= 2'd2;
        end else if ((((out_data_last_V_1_ack_out == 1'b0) & (out_data_last_V_1_state == 2'd1)) | ((out_data_last_V_1_ack_out == 1'b0) & (out_data_last_V_1_state == 2'd3) & (out_data_last_V_1_vld_in == 1'b1)))) begin
            out_data_last_V_1_state <= 2'd1;
        end else if (((~((out_data_last_V_1_vld_in == 1'b0) & (out_data_last_V_1_ack_out == 1'b1)) & ~((out_data_last_V_1_ack_out == 1'b0) & (out_data_last_V_1_vld_in == 1'b1)) & (out_data_last_V_1_state == 2'd3)) | ((out_data_last_V_1_state == 2'd1) & (out_data_last_V_1_ack_out == 1'b1)) | ((out_data_last_V_1_state == 2'd2) & (out_data_last_V_1_vld_in == 1'b1)))) begin
            out_data_last_V_1_state <= 2'd3;
        end else begin
            out_data_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_strb_V_1_ack_out == 1'b1) & (out_data_strb_V_1_vld_out == 1'b1))) begin
            out_data_strb_V_1_sel_rd <= ~out_data_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_strb_V_1_ack_in == 1'b1) & (out_data_strb_V_1_vld_in == 1'b1))) begin
            out_data_strb_V_1_sel_wr <= ~out_data_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_strb_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_strb_V_1_vld_in == 1'b0) & (out_data_strb_V_1_state == 2'd2)) | ((out_data_strb_V_1_vld_in == 1'b0) & (out_data_strb_V_1_state == 2'd3) & (out_data_strb_V_1_ack_out == 1'b1)))) begin
            out_data_strb_V_1_state <= 2'd2;
        end else if ((((out_data_strb_V_1_ack_out == 1'b0) & (out_data_strb_V_1_state == 2'd1)) | ((out_data_strb_V_1_ack_out == 1'b0) & (out_data_strb_V_1_state == 2'd3) & (out_data_strb_V_1_vld_in == 1'b1)))) begin
            out_data_strb_V_1_state <= 2'd1;
        end else if (((~((out_data_strb_V_1_vld_in == 1'b0) & (out_data_strb_V_1_ack_out == 1'b1)) & ~((out_data_strb_V_1_ack_out == 1'b0) & (out_data_strb_V_1_vld_in == 1'b1)) & (out_data_strb_V_1_state == 2'd3)) | ((out_data_strb_V_1_state == 2'd1) & (out_data_strb_V_1_ack_out == 1'b1)) | ((out_data_strb_V_1_state == 2'd2) & (out_data_strb_V_1_vld_in == 1'b1)))) begin
            out_data_strb_V_1_state <= 2'd3;
        end else begin
            out_data_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_user_V_1_ack_out == 1'b1) & (out_data_user_V_1_vld_out == 1'b1))) begin
            out_data_user_V_1_sel_rd <= ~out_data_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_user_V_1_ack_in == 1'b1) & (out_data_user_V_1_vld_in == 1'b1))) begin
            out_data_user_V_1_sel_wr <= ~out_data_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_user_V_1_vld_in == 1'b0) & (out_data_user_V_1_state == 2'd2)) | ((out_data_user_V_1_vld_in == 1'b0) & (out_data_user_V_1_state == 2'd3) & (out_data_user_V_1_ack_out == 1'b1)))) begin
            out_data_user_V_1_state <= 2'd2;
        end else if ((((out_data_user_V_1_ack_out == 1'b0) & (out_data_user_V_1_state == 2'd1)) | ((out_data_user_V_1_ack_out == 1'b0) & (out_data_user_V_1_state == 2'd3) & (out_data_user_V_1_vld_in == 1'b1)))) begin
            out_data_user_V_1_state <= 2'd1;
        end else if (((~((out_data_user_V_1_vld_in == 1'b0) & (out_data_user_V_1_ack_out == 1'b1)) & ~((out_data_user_V_1_ack_out == 1'b0) & (out_data_user_V_1_vld_in == 1'b1)) & (out_data_user_V_1_state == 2'd3)) | ((out_data_user_V_1_state == 2'd1) & (out_data_user_V_1_ack_out == 1'b1)) | ((out_data_user_V_1_state == 2'd2) & (out_data_user_V_1_vld_in == 1'b1)))) begin
            out_data_user_V_1_state <= 2'd3;
        end else begin
            out_data_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state149) & (tmp_42_fu_1042_p2 == 1'd0))) begin
        Convolve_value_1_reg_454 <= Convolve_value_2_reg_477;
    end else if (((tmp_32_fu_976_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state146))) begin
        Convolve_value_1_reg_454 <= Convolve_value_reg_442;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        Convolve_value_2_reg_477 <= grp_fu_541_p2;
    end else if ((1'b1 == ap_CS_fsm_state148)) begin
        Convolve_value_2_reg_477 <= Convolve_value_1_reg_454;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state147) & (tmp_40_fu_1003_p2 == 1'd0))) begin
        Convolve_value_reg_442 <= Convolve_value_1_reg_454;
    end else if (((tmp_30_fu_956_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state145))) begin
        Convolve_value_reg_442 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state149) & (tmp_42_fu_1042_p2 == 1'd0))) begin
        i_reg_466 <= i_1_reg_1625;
    end else if (((tmp_32_fu_976_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state146))) begin
        i_reg_466 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        idx1_reg_362 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        idx1_reg_362 <= idx_2_reg_1409;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        idx2_reg_374 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        idx2_reg_374 <= idx_3_reg_1430;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        idx3_reg_386 <= idx_4_reg_1453;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        idx3_reg_386 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state144) & (tmp_28_fu_936_p2 == 1'd0))) begin
        idx4_reg_398 <= idx_5_reg_1563;
    end else if ((~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state141))) begin
        idx4_reg_398 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state145) & (tmp_30_fu_956_p2 == 1'd0))) begin
        idx5_reg_409 <= idx2_1_reg_1581;
    end else if ((1'b1 == ap_CS_fsm_state143)) begin
        idx5_reg_409 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state170))) begin
        idx6_reg_420 <= idx3_1_reg_1594;
    end else if (((tmp_28_fu_936_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state144))) begin
        idx6_reg_420 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        idx_reg_350 <= idx_1_reg_1377;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        idx_reg_350 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        j_reg_489 <= j_1_reg_1653;
    end else if ((1'b1 == ap_CS_fsm_state148)) begin
        j_reg_489 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state147) & (tmp_40_fu_1003_p2 == 1'd0))) begin
        k_reg_431 <= k_1_reg_1607;
    end else if (((tmp_30_fu_956_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state145))) begin
        k_reg_431 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state64))) begin
        reg_571 <= Parameters_q1;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_571 <= Parameters_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        reg_594 <= Parameters_q0;
    end else if (((1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state63))) begin
        reg_594 <= Parameters_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state143) & (tmp_25_reg_1523 == 1'd0))) begin
        Bias_load_reg_1573 <= Bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state163)) begin
        Convolve_value_3_reg_1683 <= Convolve_value_3_fu_1078_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state164)) begin
        Convolve_value_5_reg_1691 <= Convolve_value_5_fu_1133_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state129)) begin
        H_Result_reg_1493 <= H_Result_fu_738_p2;
        W_Result_reg_1500 <= W_Result_fu_744_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state150)) begin
        Input_load_reg_1668 <= Input_q0;
        Weight_load_reg_1673 <= Weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        Parameters_load_14_reg_1458 <= Parameters_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        Parameters_load_15_reg_1464 <= Parameters_q1;
        Parameters_load_16_reg_1470 <= Parameters_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        Parameters_load_17_reg_1487 <= Parameters_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        Parameters_load_18_reg_1507 <= Parameters_q1;
        tmp3_reg_1513 <= tmp3_fu_750_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state141))) begin
        Parameters_load_19_reg_1555 <= Parameters_q1;
        tmp_24_reg_1550 <= tmp_24_fu_906_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        Parameters_load_5_reg_1401 <= Parameters_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        Parameters_load_7_reg_1422 <= Parameters_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_reg_1382 == 1'd1) & (1'b1 == ap_CS_fsm_state67) & (tmp_15_fu_693_p2 == 1'd0))) begin
        Precision_1_fu_138 <= Precision_reg_1395;
        Relu_Activation_1_fu_142 <= Relu_Activation_reg_1390;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        Precision_reg_1395 <= grp_fu_555_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state148)) begin
        R_Row_reg_1640 <= R_Row_fu_1030_p2;
        tmp9_reg_1645 <= tmp9_fu_1034_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        Relu_Activation_reg_1390 <= Parameters_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state147)) begin
        i_1_reg_1625 <= i_1_fu_1009_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state144)) begin
        idx2_1_reg_1581 <= idx2_1_fu_941_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state145)) begin
        idx3_1_reg_1594 <= idx3_1_fu_961_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        idx_1_reg_1377 <= idx_1_fu_610_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_1386 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        idx_2_reg_1409 <= idx_2_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_reg_1418 == 1'd1) & (tmp_6_reg_1414 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        idx_3_reg_1430 <= idx_3_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_reg_1382 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
        idx_4_reg_1453 <= idx_4_fu_698_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        idx_5_reg_1563 <= idx_5_fu_921_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_data_V_0_load_A == 1'b1)) begin
        in_data_data_V_0_payload_A <= in_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_data_V_0_load_B == 1'b1)) begin
        in_data_data_V_0_payload_B <= in_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_dest_V_0_load_A == 1'b1)) begin
        in_data_dest_V_0_payload_A <= in_data_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_dest_V_0_load_B == 1'b1)) begin
        in_data_dest_V_0_payload_B <= in_data_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_id_V_0_load_A == 1'b1)) begin
        in_data_id_V_0_payload_A <= in_data_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_id_V_0_load_B == 1'b1)) begin
        in_data_id_V_0_payload_B <= in_data_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_keep_V_0_load_A == 1'b1)) begin
        in_data_keep_V_0_payload_A <= in_data_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_keep_V_0_load_B == 1'b1)) begin
        in_data_keep_V_0_payload_B <= in_data_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_last_V_0_load_A == 1'b1)) begin
        in_data_last_V_0_payload_A <= in_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_last_V_0_load_B == 1'b1)) begin
        in_data_last_V_0_payload_B <= in_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_strb_V_0_load_A == 1'b1)) begin
        in_data_strb_V_0_payload_A <= in_data_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_strb_V_0_load_B == 1'b1)) begin
        in_data_strb_V_0_payload_B <= in_data_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_user_V_0_load_A == 1'b1)) begin
        in_data_user_V_0_payload_A <= in_data_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_user_V_0_load_B == 1'b1)) begin
        in_data_user_V_0_payload_B <= in_data_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        j_1_reg_1653 <= j_1_fu_1047_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        k_1_reg_1607 <= k_1_fu_981_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        loc_V_1_reg_1539 <= loc_V_1_fu_786_p1;
        loc_V_reg_1533 <= {{p_Val2_s_fu_764_p1[30:23]}};
        p_Result_s_reg_1528 <= p_Val2_s_fu_764_p1[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_data_V_1_load_A == 1'b1)) begin
        out_data_data_V_1_payload_A <= grp_Axi_Transfer_fu_500_out_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_data_V_1_load_B == 1'b1)) begin
        out_data_data_V_1_payload_B <= grp_Axi_Transfer_fu_500_out_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_dest_V_1_load_A == 1'b1)) begin
        out_data_dest_V_1_payload_A <= grp_Axi_Transfer_fu_500_out_data_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_dest_V_1_load_B == 1'b1)) begin
        out_data_dest_V_1_payload_B <= grp_Axi_Transfer_fu_500_out_data_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_id_V_1_load_A == 1'b1)) begin
        out_data_id_V_1_payload_A <= grp_Axi_Transfer_fu_500_out_data_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_id_V_1_load_B == 1'b1)) begin
        out_data_id_V_1_payload_B <= grp_Axi_Transfer_fu_500_out_data_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_keep_V_1_load_A == 1'b1)) begin
        out_data_keep_V_1_payload_A <= grp_Axi_Transfer_fu_500_out_data_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_keep_V_1_load_B == 1'b1)) begin
        out_data_keep_V_1_payload_B <= grp_Axi_Transfer_fu_500_out_data_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_last_V_1_load_A == 1'b1)) begin
        out_data_last_V_1_payload_A <= grp_Axi_Transfer_fu_500_out_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_last_V_1_load_B == 1'b1)) begin
        out_data_last_V_1_payload_B <= grp_Axi_Transfer_fu_500_out_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_strb_V_1_load_A == 1'b1)) begin
        out_data_strb_V_1_payload_A <= grp_Axi_Transfer_fu_500_out_data_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_strb_V_1_load_B == 1'b1)) begin
        out_data_strb_V_1_payload_B <= grp_Axi_Transfer_fu_500_out_data_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_user_V_1_load_A == 1'b1)) begin
        out_data_user_V_1_payload_A <= grp_Axi_Transfer_fu_500_out_data_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_user_V_1_load_B == 1'b1)) begin
        out_data_user_V_1_payload_B <= grp_Axi_Transfer_fu_500_out_data_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state169)) begin
        p_Result_1_reg_1701 <= p_Val2_5_fu_1143_p1[32'd31];
        p_Val2_7_reg_1706 <= p_Val2_7_fu_1265_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state138)) begin
        p_Val2_2_reg_1544 <= p_Val2_2_fu_883_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_582 <= grp_fu_555_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state35))) begin
        reg_587 <= grp_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state154))) begin
        reg_599 <= grp_fu_547_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        tmp1_reg_1435 <= tmp1_fu_673_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        tmp2_reg_1440 <= tmp2_fu_679_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        tmp_14_reg_1445 <= tmp_14_fu_685_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_1_reg_1386 <= grp_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state131)) begin
        tmp_23_reg_1518 <= tmp_23_fu_754_p2;
        tmp_25_reg_1523 <= tmp_25_fu_758_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_28_fu_936_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state144))) begin
        tmp_29_reg_1586 <= tmp_29_fu_947_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_30_fu_956_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state145))) begin
        tmp_31_reg_1599 <= tmp_31_fu_967_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_32_fu_976_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state146))) begin
        tmp_33_reg_1612 <= tmp_33_fu_987_p2;
        tmp_34_reg_1617 <= tmp_34_fu_993_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_40_fu_1003_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state147))) begin
        tmp_41_reg_1630 <= tmp_41_fu_1020_p2;
        tmp_reg_1635 <= tmp_fu_1025_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & ((tmp_2_fu_631_p2 == 1'd0) | (tmp_1_reg_1386 == 1'd0)))) begin
        tmp_6_reg_1414 <= tmp_6_fu_642_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        tmp_7_reg_1418 <= grp_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_s_reg_1382 <= tmp_s_fu_621_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        Bias_address0 = tmp_27_fu_927_p1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        Bias_address0 = tmp_13_fu_668_p1;
    end else begin
        Bias_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state142))) begin
        Bias_ce0 = 1'b1;
    end else begin
        Bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        Bias_we0 = 1'b1;
    end else begin
        Bias_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        Input_address0 = tmp_43_fu_1063_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        Input_address0 = tmp_5_fu_648_p1;
    end else begin
        Input_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state149))) begin
        Input_ce0 = 1'b1;
    end else begin
        Input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        Input_we0 = 1'b1;
    end else begin
        Input_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        Parameters_address0 = 64'd9;
    end else if (((1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state63))) begin
        Parameters_address0 = 64'd8;
    end else if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37))) begin
        Parameters_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        Parameters_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        Parameters_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        Parameters_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        Parameters_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Parameters_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        Parameters_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Parameters_address0 = tmp_9_fu_616_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Parameters_address0 = 64'd0;
    end else begin
        Parameters_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        Parameters_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        Parameters_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        Parameters_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        Parameters_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        Parameters_address1 = 64'd3;
    end else if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state63))) begin
        Parameters_address1 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state140))) begin
        Parameters_address1 = 64'd6;
    end else begin
        Parameters_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        Parameters_ce0 = 1'b1;
    end else begin
        Parameters_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state63) | (~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state140)))) begin
        Parameters_ce1 = 1'b1;
    end else begin
        Parameters_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        Parameters_we0 = 1'b1;
    end else begin
        Parameters_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        Weight_address0 = tmp_45_fu_1073_p1;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        Weight_address0 = tmp_18_fu_712_p1;
    end else begin
        Weight_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state149))) begin
        Weight_ce0 = 1'b1;
    end else begin
        Weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        Weight_we0 = 1'b1;
    end else begin
        Weight_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state40))) begin
        grp_Axi_Transfer_fu_500_ap_start = 1'b1;
    end else begin
        grp_Axi_Transfer_fu_500_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state40))) begin
        grp_Axi_Transfer_fu_500_loop_r = 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_Axi_Transfer_fu_500_loop_r = 1'd1;
    end else begin
        grp_Axi_Transfer_fu_500_loop_r = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state170)) begin
        grp_Axi_Transfer_fu_500_value_r = p_Val2_9_fu_1278_p3;
    end else if ((1'b1 == ap_CS_fsm_state141)) begin
        grp_Axi_Transfer_fu_500_value_r = W_Result_reg_1500;
    end else if ((1'b1 == ap_CS_fsm_state140)) begin
        grp_Axi_Transfer_fu_500_value_r = H_Result_reg_1493;
    end else if ((1'b1 == ap_CS_fsm_state139)) begin
        grp_Axi_Transfer_fu_500_value_r = p_Val2_4_fu_896_p3;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_Axi_Transfer_fu_500_value_r = 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_Axi_Transfer_fu_500_value_r = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_Axi_Transfer_fu_500_value_r = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_Axi_Transfer_fu_500_value_r = 32'd0;
    end else begin
        grp_Axi_Transfer_fu_500_value_r = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state155)) begin
        grp_fu_541_p0 = Convolve_value_2_reg_477;
    end else if ((1'b1 == ap_CS_fsm_state146)) begin
        grp_fu_541_p0 = Convolve_value_reg_442;
    end else begin
        grp_fu_541_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state155)) begin
        grp_fu_541_p1 = reg_599;
    end else if ((1'b1 == ap_CS_fsm_state146)) begin
        grp_fu_541_p1 = Bias_load_reg_1573;
    end else begin
        grp_fu_541_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state165)) begin
        grp_fu_547_p0 = Convolve_value_5_reg_1691;
    end else if ((1'b1 == ap_CS_fsm_state151)) begin
        grp_fu_547_p0 = Input_load_reg_1668;
    end else begin
        grp_fu_547_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state165)) begin
        grp_fu_547_p1 = Precision_1_fu_138;
    end else if ((1'b1 == ap_CS_fsm_state151)) begin
        grp_fu_547_p1 = Weight_load_reg_1673;
    end else begin
        grp_fu_547_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state68)) | (~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state40)) | (~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14)))) begin
        grp_fu_555_ce = 1'b1;
    end else begin
        grp_fu_555_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        grp_fu_555_p0 = tmp_23_reg_1518;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state40))) begin
        grp_fu_555_p0 = grp_Axi_Transfer_fu_500_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_555_p0 = Parameters_q0;
    end else begin
        grp_fu_555_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        grp_fu_723_ap_start = 1'b1;
    end else begin
        grp_fu_723_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        grp_fu_732_ap_start = 1'b1;
    end else begin
        grp_fu_732_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state40))) begin
        in_data_TDATA_blk_n = grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n;
    end else begin
        in_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((in_data_data_V_0_sel == 1'b1)) begin
        in_data_data_V_0_data_out = in_data_data_V_0_payload_B;
    end else begin
        in_data_data_V_0_data_out = in_data_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((in_data_dest_V_0_sel == 1'b1)) begin
        in_data_dest_V_0_data_out = in_data_dest_V_0_payload_B;
    end else begin
        in_data_dest_V_0_data_out = in_data_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((in_data_id_V_0_sel == 1'b1)) begin
        in_data_id_V_0_data_out = in_data_id_V_0_payload_B;
    end else begin
        in_data_id_V_0_data_out = in_data_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((in_data_keep_V_0_sel == 1'b1)) begin
        in_data_keep_V_0_data_out = in_data_keep_V_0_payload_B;
    end else begin
        in_data_keep_V_0_data_out = in_data_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((in_data_last_V_0_sel == 1'b1)) begin
        in_data_last_V_0_data_out = in_data_last_V_0_payload_B;
    end else begin
        in_data_last_V_0_data_out = in_data_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((in_data_strb_V_0_sel == 1'b1)) begin
        in_data_strb_V_0_data_out = in_data_strb_V_0_payload_B;
    end else begin
        in_data_strb_V_0_data_out = in_data_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((in_data_user_V_0_sel == 1'b1)) begin
        in_data_user_V_0_data_out = in_data_user_V_0_payload_B;
    end else begin
        in_data_user_V_0_data_out = in_data_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state40))) begin
        out_data_TDATA_blk_n = grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n;
    end else begin
        out_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_data_data_V_1_sel == 1'b1)) begin
        out_data_data_V_1_data_out = out_data_data_V_1_payload_B;
    end else begin
        out_data_data_V_1_data_out = out_data_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state40))) begin
        out_data_data_V_1_vld_in = grp_Axi_Transfer_fu_500_out_data_TVALID;
    end else begin
        out_data_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_dest_V_1_sel == 1'b1)) begin
        out_data_dest_V_1_data_out = out_data_dest_V_1_payload_B;
    end else begin
        out_data_dest_V_1_data_out = out_data_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state40))) begin
        out_data_dest_V_1_vld_in = grp_Axi_Transfer_fu_500_out_data_TVALID;
    end else begin
        out_data_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_id_V_1_sel == 1'b1)) begin
        out_data_id_V_1_data_out = out_data_id_V_1_payload_B;
    end else begin
        out_data_id_V_1_data_out = out_data_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state40))) begin
        out_data_id_V_1_vld_in = grp_Axi_Transfer_fu_500_out_data_TVALID;
    end else begin
        out_data_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_keep_V_1_sel == 1'b1)) begin
        out_data_keep_V_1_data_out = out_data_keep_V_1_payload_B;
    end else begin
        out_data_keep_V_1_data_out = out_data_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state40))) begin
        out_data_keep_V_1_vld_in = grp_Axi_Transfer_fu_500_out_data_TVALID;
    end else begin
        out_data_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_last_V_1_sel == 1'b1)) begin
        out_data_last_V_1_data_out = out_data_last_V_1_payload_B;
    end else begin
        out_data_last_V_1_data_out = out_data_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state40))) begin
        out_data_last_V_1_vld_in = grp_Axi_Transfer_fu_500_out_data_TVALID;
    end else begin
        out_data_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_strb_V_1_sel == 1'b1)) begin
        out_data_strb_V_1_data_out = out_data_strb_V_1_payload_B;
    end else begin
        out_data_strb_V_1_data_out = out_data_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state40))) begin
        out_data_strb_V_1_vld_in = grp_Axi_Transfer_fu_500_out_data_TVALID;
    end else begin
        out_data_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_user_V_1_sel == 1'b1)) begin
        out_data_user_V_1_data_out = out_data_user_V_1_payload_B;
    end else begin
        out_data_user_V_1_data_out = out_data_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state40))) begin
        out_data_user_V_1_vld_in = grp_Axi_Transfer_fu_500_out_data_TVALID;
    end else begin
        out_data_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_604_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (tmp_s_fu_621_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (tmp_1_reg_1386 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (((tmp_2_fu_631_p2 == 1'd0) & (tmp_6_fu_642_p2 == 1'd0)) | ((tmp_6_fu_642_p2 == 1'd0) & (tmp_1_reg_1386 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else if (((1'b1 == ap_CS_fsm_state13) & (((tmp_6_fu_642_p2 == 1'd1) & (tmp_2_fu_631_p2 == 1'd0)) | ((tmp_6_fu_642_p2 == 1'd1) & (tmp_1_reg_1386 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if ((~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (grp_fu_565_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & ((tmp_10_fu_657_p2 == 1'd0) | (tmp_7_reg_1418 == 1'd0) | (tmp_6_reg_1414 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            if ((~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            if (((1'b1 == ap_CS_fsm_state67) & ((tmp_15_fu_693_p2 == 1'd0) | (tmp_s_reg_1382 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state68 : begin
            if ((~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            if ((~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state139))) begin
                ap_NS_fsm = ap_ST_fsm_state140;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state139;
            end
        end
        ap_ST_fsm_state140 : begin
            if ((~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state140))) begin
                ap_NS_fsm = ap_ST_fsm_state141;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state140;
            end
        end
        ap_ST_fsm_state141 : begin
            if ((~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state141))) begin
                ap_NS_fsm = ap_ST_fsm_state142;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state141;
            end
        end
        ap_ST_fsm_state142 : begin
            if (((1'b1 == ap_CS_fsm_state142) & (tmp_26_fu_916_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state143;
            end
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            if (((1'b1 == ap_CS_fsm_state144) & (tmp_28_fu_936_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state142;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end
        end
        ap_ST_fsm_state145 : begin
            if (((1'b1 == ap_CS_fsm_state145) & (tmp_30_fu_956_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end
        end
        ap_ST_fsm_state146 : begin
            if (((tmp_32_fu_976_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state146))) begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state160;
            end
        end
        ap_ST_fsm_state147 : begin
            if (((1'b1 == ap_CS_fsm_state147) & (tmp_40_fu_1003_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state148;
            end
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            if (((1'b1 == ap_CS_fsm_state149) & (tmp_42_fu_1042_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state150;
            end
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            if ((~((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state170))) begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state170;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Convolve_value_3_fu_1078_p3 = ((tmp_25_reg_1523[0:0] === 1'b1) ? Convolve_value_reg_442 : grp_fu_541_p2);

assign Convolve_value_3_to_s_fu_1085_p1 = Convolve_value_3_reg_1683;

assign Convolve_value_4_fu_1126_p3 = ((tmp_39_fu_1120_p2[0:0] === 1'b1) ? 32'd0 : Convolve_value_3_reg_1683);

assign Convolve_value_5_fu_1133_p3 = ((tmp_24_reg_1550[0:0] === 1'b1) ? Convolve_value_4_fu_1126_p3 : Convolve_value_3_reg_1683);

assign H_Result_fu_738_p2 = (32'd1 + grp_fu_723_p2);

assign Index_fu_1058_p2 = (tmp5_fu_1053_p2 + R_Row_reg_1640);

assign R_Row_fu_1030_p2 = ($signed(Parameters_load_15_reg_1464) * $signed(tmp_41_reg_1630));

assign W_Result_fu_744_p2 = (32'd1 + grp_fu_732_p2);

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd140];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state146 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state148 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state154 = ap_CS_fsm[32'd153];

assign ap_CS_fsm_state155 = ap_CS_fsm[32'd154];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state163 = ap_CS_fsm[32'd162];

assign ap_CS_fsm_state164 = ap_CS_fsm[32'd163];

assign ap_CS_fsm_state165 = ap_CS_fsm[32'd164];

assign ap_CS_fsm_state168 = ap_CS_fsm[32'd167];

assign ap_CS_fsm_state169 = ap_CS_fsm[32'd168];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state170 = ap_CS_fsm[32'd169];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

always @ (*) begin
    ap_block_state139 = ((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0));
end

always @ (*) begin
    ap_block_state14 = ((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0));
end

always @ (*) begin
    ap_block_state140 = ((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0));
end

always @ (*) begin
    ap_block_state141 = ((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0));
end

always @ (*) begin
    ap_block_state170 = ((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0));
end

always @ (*) begin
    ap_block_state40 = ((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0));
end

always @ (*) begin
    ap_block_state68 = ((grp_Axi_Transfer_fu_500_in_data_TDATA_blk_n == 1'b0) | (grp_Axi_Transfer_fu_500_out_data_TDATA_blk_n == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_fu_604_p2 = ((idx_reg_350 == 5'd17) ? 1'b1 : 1'b0);

assign grp_Axi_Transfer_fu_500_in_data_TVALID = in_data_dest_V_0_state[1'd0];

assign grp_Axi_Transfer_fu_500_out_data_TREADY = out_data_dest_V_1_state[1'd1];

assign grp_fu_565_p2 = ((Parameters_q0 == 32'd1) ? 1'b1 : 1'b0);

assign grp_fu_723_p0 = ($signed(tmp_19_fu_717_p0) - $signed(reg_594));

assign grp_fu_732_p0 = ($signed(Parameters_load_15_reg_1464) - $signed(Parameters_load_16_reg_1470));

assign i_1_fu_1009_p2 = (i_reg_466 + 31'd1);

assign i_cast_fu_999_p1 = i_reg_466;

assign idx1_cast_fu_627_p1 = idx1_reg_362;

assign idx2_1_fu_941_p2 = (idx5_reg_409 + 31'd1);

assign idx2_cast_fu_653_p1 = idx2_reg_374;

assign idx3_1_fu_961_p2 = (idx6_reg_420 + 31'd1);

assign idx3_cast_fu_689_p1 = idx3_reg_386;

assign idx4_cast_fu_912_p1 = idx4_reg_398;

assign idx5_cast_fu_932_p1 = idx5_reg_409;

assign idx6_cast_fu_952_p1 = idx6_reg_420;

assign idx_1_fu_610_p2 = (idx_reg_350 + 5'd1);

assign idx_2_fu_636_p2 = (idx1_reg_362 + 31'd1);

assign idx_3_fu_662_p2 = (idx2_reg_374 + 31'd1);

assign idx_4_fu_698_p2 = (idx3_reg_386 + 31'd1);

assign idx_5_fu_921_p2 = (idx4_reg_398 + 31'd1);

assign in_data_TREADY = in_data_dest_V_0_state[1'd1];

assign in_data_data_V_0_ack_in = in_data_data_V_0_state[1'd1];

assign in_data_data_V_0_ack_out = grp_Axi_Transfer_fu_500_in_data_TREADY;

assign in_data_data_V_0_load_A = (in_data_data_V_0_state_cmp_full & ~in_data_data_V_0_sel_wr);

assign in_data_data_V_0_load_B = (in_data_data_V_0_state_cmp_full & in_data_data_V_0_sel_wr);

assign in_data_data_V_0_sel = in_data_data_V_0_sel_rd;

assign in_data_data_V_0_state_cmp_full = ((in_data_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_data_V_0_vld_in = in_data_TVALID;

assign in_data_data_V_0_vld_out = in_data_data_V_0_state[1'd0];

assign in_data_dest_V_0_ack_in = in_data_dest_V_0_state[1'd1];

assign in_data_dest_V_0_ack_out = grp_Axi_Transfer_fu_500_in_data_TREADY;

assign in_data_dest_V_0_load_A = (in_data_dest_V_0_state_cmp_full & ~in_data_dest_V_0_sel_wr);

assign in_data_dest_V_0_load_B = (in_data_dest_V_0_state_cmp_full & in_data_dest_V_0_sel_wr);

assign in_data_dest_V_0_sel = in_data_dest_V_0_sel_rd;

assign in_data_dest_V_0_state_cmp_full = ((in_data_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_dest_V_0_vld_in = in_data_TVALID;

assign in_data_dest_V_0_vld_out = in_data_dest_V_0_state[1'd0];

assign in_data_id_V_0_ack_in = in_data_id_V_0_state[1'd1];

assign in_data_id_V_0_ack_out = grp_Axi_Transfer_fu_500_in_data_TREADY;

assign in_data_id_V_0_load_A = (in_data_id_V_0_state_cmp_full & ~in_data_id_V_0_sel_wr);

assign in_data_id_V_0_load_B = (in_data_id_V_0_state_cmp_full & in_data_id_V_0_sel_wr);

assign in_data_id_V_0_sel = in_data_id_V_0_sel_rd;

assign in_data_id_V_0_state_cmp_full = ((in_data_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_id_V_0_vld_in = in_data_TVALID;

assign in_data_id_V_0_vld_out = in_data_id_V_0_state[1'd0];

assign in_data_keep_V_0_ack_in = in_data_keep_V_0_state[1'd1];

assign in_data_keep_V_0_ack_out = grp_Axi_Transfer_fu_500_in_data_TREADY;

assign in_data_keep_V_0_load_A = (in_data_keep_V_0_state_cmp_full & ~in_data_keep_V_0_sel_wr);

assign in_data_keep_V_0_load_B = (in_data_keep_V_0_state_cmp_full & in_data_keep_V_0_sel_wr);

assign in_data_keep_V_0_sel = in_data_keep_V_0_sel_rd;

assign in_data_keep_V_0_state_cmp_full = ((in_data_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_keep_V_0_vld_in = in_data_TVALID;

assign in_data_keep_V_0_vld_out = in_data_keep_V_0_state[1'd0];

assign in_data_last_V_0_ack_in = in_data_last_V_0_state[1'd1];

assign in_data_last_V_0_ack_out = grp_Axi_Transfer_fu_500_in_data_TREADY;

assign in_data_last_V_0_load_A = (in_data_last_V_0_state_cmp_full & ~in_data_last_V_0_sel_wr);

assign in_data_last_V_0_load_B = (in_data_last_V_0_state_cmp_full & in_data_last_V_0_sel_wr);

assign in_data_last_V_0_sel = in_data_last_V_0_sel_rd;

assign in_data_last_V_0_state_cmp_full = ((in_data_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_last_V_0_vld_in = in_data_TVALID;

assign in_data_last_V_0_vld_out = in_data_last_V_0_state[1'd0];

assign in_data_strb_V_0_ack_in = in_data_strb_V_0_state[1'd1];

assign in_data_strb_V_0_ack_out = grp_Axi_Transfer_fu_500_in_data_TREADY;

assign in_data_strb_V_0_load_A = (in_data_strb_V_0_state_cmp_full & ~in_data_strb_V_0_sel_wr);

assign in_data_strb_V_0_load_B = (in_data_strb_V_0_state_cmp_full & in_data_strb_V_0_sel_wr);

assign in_data_strb_V_0_sel = in_data_strb_V_0_sel_rd;

assign in_data_strb_V_0_state_cmp_full = ((in_data_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_strb_V_0_vld_in = in_data_TVALID;

assign in_data_strb_V_0_vld_out = in_data_strb_V_0_state[1'd0];

assign in_data_user_V_0_ack_in = in_data_user_V_0_state[1'd1];

assign in_data_user_V_0_ack_out = grp_Axi_Transfer_fu_500_in_data_TREADY;

assign in_data_user_V_0_load_A = (in_data_user_V_0_state_cmp_full & ~in_data_user_V_0_sel_wr);

assign in_data_user_V_0_load_B = (in_data_user_V_0_state_cmp_full & in_data_user_V_0_sel_wr);

assign in_data_user_V_0_sel = in_data_user_V_0_sel_rd;

assign in_data_user_V_0_state_cmp_full = ((in_data_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_user_V_0_vld_in = in_data_TVALID;

assign in_data_user_V_0_vld_out = in_data_user_V_0_state[1'd0];

assign isNeg_1_fu_1193_p3 = sh_assign_2_fu_1187_p2[32'd8];

assign isNeg_fu_812_p3 = sh_assign_fu_806_p2[32'd8];

assign j_1_fu_1047_p2 = (j_reg_489 + 31'd1);

assign j_cast_fu_1038_p1 = j_reg_489;

assign k_1_fu_981_p2 = (k_reg_431 + 31'd1);

assign k_cast_fu_972_p1 = k_reg_431;

assign loc_V_1_fu_786_p1 = p_Val2_s_fu_764_p1[22:0];

assign loc_V_2_fu_1155_p4 = {{p_Val2_5_fu_1143_p1[30:23]}};

assign loc_V_3_fu_1165_p1 = p_Val2_5_fu_1143_p1[22:0];

assign notlhs_fu_1102_p2 = ((tmp_35_fu_1088_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_1108_p2 = ((tmp_54_fu_1098_p1 == 23'd0) ? 1'b1 : 1'b0);

assign out_data_TDATA = out_data_data_V_1_data_out;

assign out_data_TDEST = out_data_dest_V_1_data_out;

assign out_data_TID = out_data_id_V_1_data_out;

assign out_data_TKEEP = out_data_keep_V_1_data_out;

assign out_data_TLAST = out_data_last_V_1_data_out;

assign out_data_TSTRB = out_data_strb_V_1_data_out;

assign out_data_TUSER = out_data_user_V_1_data_out;

assign out_data_TVALID = out_data_dest_V_1_state[1'd0];

assign out_data_data_V_1_ack_in = out_data_data_V_1_state[1'd1];

assign out_data_data_V_1_ack_out = out_data_TREADY;

assign out_data_data_V_1_load_A = (out_data_data_V_1_state_cmp_full & ~out_data_data_V_1_sel_wr);

assign out_data_data_V_1_load_B = (out_data_data_V_1_state_cmp_full & out_data_data_V_1_sel_wr);

assign out_data_data_V_1_sel = out_data_data_V_1_sel_rd;

assign out_data_data_V_1_state_cmp_full = ((out_data_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_data_V_1_vld_out = out_data_data_V_1_state[1'd0];

assign out_data_dest_V_1_ack_in = out_data_dest_V_1_state[1'd1];

assign out_data_dest_V_1_ack_out = out_data_TREADY;

assign out_data_dest_V_1_load_A = (out_data_dest_V_1_state_cmp_full & ~out_data_dest_V_1_sel_wr);

assign out_data_dest_V_1_load_B = (out_data_dest_V_1_state_cmp_full & out_data_dest_V_1_sel_wr);

assign out_data_dest_V_1_sel = out_data_dest_V_1_sel_rd;

assign out_data_dest_V_1_state_cmp_full = ((out_data_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_dest_V_1_vld_out = out_data_dest_V_1_state[1'd0];

assign out_data_id_V_1_ack_in = out_data_id_V_1_state[1'd1];

assign out_data_id_V_1_ack_out = out_data_TREADY;

assign out_data_id_V_1_load_A = (out_data_id_V_1_state_cmp_full & ~out_data_id_V_1_sel_wr);

assign out_data_id_V_1_load_B = (out_data_id_V_1_state_cmp_full & out_data_id_V_1_sel_wr);

assign out_data_id_V_1_sel = out_data_id_V_1_sel_rd;

assign out_data_id_V_1_state_cmp_full = ((out_data_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_id_V_1_vld_out = out_data_id_V_1_state[1'd0];

assign out_data_keep_V_1_ack_in = out_data_keep_V_1_state[1'd1];

assign out_data_keep_V_1_ack_out = out_data_TREADY;

assign out_data_keep_V_1_load_A = (out_data_keep_V_1_state_cmp_full & ~out_data_keep_V_1_sel_wr);

assign out_data_keep_V_1_load_B = (out_data_keep_V_1_state_cmp_full & out_data_keep_V_1_sel_wr);

assign out_data_keep_V_1_sel = out_data_keep_V_1_sel_rd;

assign out_data_keep_V_1_state_cmp_full = ((out_data_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_keep_V_1_vld_out = out_data_keep_V_1_state[1'd0];

assign out_data_last_V_1_ack_in = out_data_last_V_1_state[1'd1];

assign out_data_last_V_1_ack_out = out_data_TREADY;

assign out_data_last_V_1_load_A = (out_data_last_V_1_state_cmp_full & ~out_data_last_V_1_sel_wr);

assign out_data_last_V_1_load_B = (out_data_last_V_1_state_cmp_full & out_data_last_V_1_sel_wr);

assign out_data_last_V_1_sel = out_data_last_V_1_sel_rd;

assign out_data_last_V_1_state_cmp_full = ((out_data_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_last_V_1_vld_out = out_data_last_V_1_state[1'd0];

assign out_data_strb_V_1_ack_in = out_data_strb_V_1_state[1'd1];

assign out_data_strb_V_1_ack_out = out_data_TREADY;

assign out_data_strb_V_1_load_A = (out_data_strb_V_1_state_cmp_full & ~out_data_strb_V_1_sel_wr);

assign out_data_strb_V_1_load_B = (out_data_strb_V_1_state_cmp_full & out_data_strb_V_1_sel_wr);

assign out_data_strb_V_1_sel = out_data_strb_V_1_sel_rd;

assign out_data_strb_V_1_state_cmp_full = ((out_data_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_strb_V_1_vld_out = out_data_strb_V_1_state[1'd0];

assign out_data_user_V_1_ack_in = out_data_user_V_1_state[1'd1];

assign out_data_user_V_1_ack_out = out_data_TREADY;

assign out_data_user_V_1_load_A = (out_data_user_V_1_state_cmp_full & ~out_data_user_V_1_sel_wr);

assign out_data_user_V_1_load_B = (out_data_user_V_1_state_cmp_full & out_data_user_V_1_sel_wr);

assign out_data_user_V_1_sel = out_data_user_V_1_sel_rd;

assign out_data_user_V_1_state_cmp_full = ((out_data_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_user_V_1_vld_out = out_data_user_V_1_state[1'd0];

assign p_Val2_2_fu_883_p3 = ((isNeg_fu_812_p3[0:0] === 1'b1) ? tmp_36_fu_869_p1 : tmp_47_fu_873_p4);

assign p_Val2_4_fu_896_p3 = ((p_Result_s_reg_1528[0:0] === 1'b1) ? p_Val2_6_i_i_i3_fu_891_p2 : p_Val2_2_reg_1544);

assign p_Val2_5_fu_1143_p1 = reg_599;

assign p_Val2_6_i_i_i3_fu_891_p2 = (32'd0 - p_Val2_2_reg_1544);

assign p_Val2_6_i_i_i4_fu_1273_p2 = (32'd0 - p_Val2_7_reg_1706);

assign p_Val2_7_fu_1265_p3 = ((isNeg_1_fu_1193_p3[0:0] === 1'b1) ? tmp_48_fu_1251_p1 : tmp_49_fu_1255_p4);

assign p_Val2_9_fu_1278_p3 = ((p_Result_1_reg_1701[0:0] === 1'b1) ? p_Val2_6_i_i_i4_fu_1273_p2 : p_Val2_7_reg_1706);

assign p_Val2_s_fu_764_p1 = grp_fu_555_p1;

assign sh_assign_1_fu_829_p3 = ((isNeg_fu_812_p3[0:0] === 1'b1) ? tmp_5_i_i_i3_cast_fu_825_p1 : sh_assign_fu_806_p2);

assign sh_assign_2_fu_1187_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i3_cast6_fu_1183_p1));

assign sh_assign_3_fu_1211_p3 = ((isNeg_1_fu_1193_p3[0:0] === 1'b1) ? tmp_5_i_i_i4_cast_fu_1207_p1 : sh_assign_2_fu_1187_p2);

assign sh_assign_7_cast_cas_fu_841_p1 = $signed(sh_assign_1_fu_829_p3);

assign sh_assign_7_cast_fu_837_p1 = $signed(sh_assign_1_fu_829_p3);

assign sh_assign_9_cast_cas_fu_1223_p1 = $signed(sh_assign_3_fu_1211_p3);

assign sh_assign_9_cast_fu_1219_p1 = $signed(sh_assign_3_fu_1211_p3);

assign sh_assign_fu_806_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i2_cast8_fu_803_p1));

assign tmp1_fu_673_p1 = reg_571;

assign tmp1_fu_673_p2 = ($signed(reg_594) * $signed(tmp1_fu_673_p1));

assign tmp2_fu_679_p0 = reg_571;

assign tmp2_fu_679_p2 = ($signed(tmp2_fu_679_p0) * $signed(reg_594));

assign tmp3_fu_750_p2 = ($signed(W_Result_reg_1500) * $signed(H_Result_reg_1493));

assign tmp4_fu_1015_p2 = (tmp_29_reg_1586 + i_cast_fu_999_p1);

assign tmp5_fu_1053_p2 = (tmp_31_reg_1599 + j_cast_fu_1038_p1);

assign tmp9_fu_1034_p2 = ($signed(Parameters_load_16_reg_1470) * $signed(tmp_reg_1635));

assign tmp_10_fu_657_p2 = (($signed(idx2_cast_fu_653_p1) < $signed(Parameters_load_7_reg_1422)) ? 1'b1 : 1'b0);

assign tmp_13_fu_668_p1 = idx2_reg_374;

assign tmp_14_fu_685_p2 = ($signed(tmp2_reg_1440) * $signed(tmp1_reg_1435));

assign tmp_15_fu_693_p2 = (($signed(idx3_cast_fu_689_p1) < $signed(tmp_14_reg_1445)) ? 1'b1 : 1'b0);

assign tmp_18_fu_712_p1 = idx3_reg_386;

assign tmp_19_fu_717_p0 = reg_571;

assign tmp_23_fu_754_p2 = ($signed(Parameters_load_18_reg_1507) * $signed(tmp3_reg_1513));

assign tmp_24_fu_906_p2 = ((Relu_Activation_1_fu_142 == 32'd1) ? 1'b1 : 1'b0);

assign tmp_25_fu_758_p2 = ((Parameters_q1 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_26_fu_916_p2 = (($signed(idx4_cast_fu_912_p1) < $signed(Parameters_load_18_reg_1507)) ? 1'b1 : 1'b0);

assign tmp_27_fu_927_p1 = idx4_reg_398;

assign tmp_28_fu_936_p2 = (($signed(idx5_cast_fu_932_p1) < $signed(H_Result_reg_1493)) ? 1'b1 : 1'b0);

assign tmp_29_fu_947_p1 = idx5_cast_fu_932_p1;

assign tmp_29_fu_947_p2 = ($signed(Parameters_load_14_reg_1458) * $signed({{1'b0}, {tmp_29_fu_947_p1}}));

assign tmp_2_fu_631_p2 = (($signed(idx1_cast_fu_627_p1) < $signed(Parameters_load_5_reg_1401)) ? 1'b1 : 1'b0);

assign tmp_30_fu_956_p2 = (($signed(idx6_cast_fu_952_p1) < $signed(W_Result_reg_1500)) ? 1'b1 : 1'b0);

assign tmp_31_fu_967_p1 = idx6_cast_fu_952_p1;

assign tmp_31_fu_967_p2 = ($signed(Parameters_load_17_reg_1487) * $signed({{1'b0}, {tmp_31_fu_967_p1}}));

assign tmp_32_fu_976_p2 = (($signed(k_cast_fu_972_p1) < $signed(Parameters_load_19_reg_1555)) ? 1'b1 : 1'b0);

assign tmp_33_fu_987_p0 = reg_571;

assign tmp_33_fu_987_p1 = k_cast_fu_972_p1;

assign tmp_33_fu_987_p2 = ($signed(tmp_33_fu_987_p0) * $signed({{1'b0}, {tmp_33_fu_987_p1}}));

assign tmp_34_fu_993_p1 = k_cast_fu_972_p1;

assign tmp_34_fu_993_p2 = ($signed(reg_594) * $signed({{1'b0}, {tmp_34_fu_993_p1}}));

assign tmp_35_fu_1088_p4 = {{Convolve_value_3_to_s_fu_1085_p1[30:23]}};

assign tmp_36_fu_869_p1 = tmp_51_fu_861_p3;

assign tmp_37_fu_1114_p2 = (notrhs_fu_1108_p2 | notlhs_fu_1102_p2);

assign tmp_39_fu_1120_p2 = (tmp_38_fu_560_p2 & tmp_37_fu_1114_p2);

assign tmp_3_i_i_i2_cast9_fu_799_p1 = tmp_3_i_i_i2_fu_790_p4;

assign tmp_3_i_i_i2_fu_790_p4 = {{{{1'd1}, {loc_V_1_reg_1539}}}, {1'd0}};

assign tmp_3_i_i_i3_cast7_fu_1179_p1 = tmp_3_i_i_i3_fu_1169_p4;

assign tmp_3_i_i_i3_fu_1169_p4 = {{{{1'd1}, {loc_V_3_fu_1165_p1}}}, {1'd0}};

assign tmp_40_fu_1003_p2 = (($signed(i_cast_fu_999_p1) < $signed(reg_594)) ? 1'b1 : 1'b0);

assign tmp_41_fu_1020_p2 = (tmp4_fu_1015_p2 + tmp_33_reg_1612);

assign tmp_42_fu_1042_p2 = (($signed(j_cast_fu_1038_p1) < $signed(Parameters_load_16_reg_1470)) ? 1'b1 : 1'b0);

assign tmp_43_fu_1063_p1 = $signed(Index_fu_1058_p2);

assign tmp_44_fu_1068_p2 = (tmp9_reg_1645 + j_cast_fu_1038_p1);

assign tmp_45_fu_1073_p1 = $signed(tmp_44_fu_1068_p2);

assign tmp_47_fu_873_p4 = {{tmp_i_i_i3_fu_855_p2[55:24]}};

assign tmp_48_fu_1251_p1 = tmp_58_fu_1243_p3;

assign tmp_49_fu_1255_p4 = {{tmp_i_i_i4_fu_1237_p2[55:24]}};

assign tmp_51_fu_861_p3 = tmp_8_i_i_i3_fu_849_p2[32'd24];

assign tmp_54_fu_1098_p1 = Convolve_value_3_to_s_fu_1085_p1[22:0];

assign tmp_58_fu_1243_p3 = tmp_8_i_i_i4_fu_1231_p2[32'd24];

assign tmp_5_fu_648_p1 = idx1_reg_362;

assign tmp_5_i_i_i3_cast_fu_825_p1 = $signed(tmp_5_i_i_i3_fu_820_p2);

assign tmp_5_i_i_i3_fu_820_p2 = (8'd127 - loc_V_reg_1533);

assign tmp_5_i_i_i4_cast_fu_1207_p1 = $signed(tmp_5_i_i_i4_fu_1201_p2);

assign tmp_5_i_i_i4_fu_1201_p2 = (8'd127 - loc_V_2_fu_1155_p4);

assign tmp_6_fu_642_p2 = ((reg_571 == 32'd1) ? 1'b1 : 1'b0);

assign tmp_7_i_i_i3_fu_845_p1 = $unsigned(sh_assign_7_cast_fu_837_p1);

assign tmp_7_i_i_i4_fu_1227_p1 = $unsigned(sh_assign_9_cast_fu_1219_p1);

assign tmp_8_i_i_i3_fu_849_p2 = tmp_3_i_i_i2_fu_790_p4 >> sh_assign_7_cast_cas_fu_841_p1;

assign tmp_8_i_i_i4_fu_1231_p2 = tmp_3_i_i_i3_fu_1169_p4 >> sh_assign_9_cast_cas_fu_1223_p1;

assign tmp_9_fu_616_p1 = idx_reg_350;

assign tmp_fu_1025_p2 = (i_cast_fu_999_p1 + tmp_34_reg_1617);

assign tmp_i_i_i3_fu_855_p2 = tmp_3_i_i_i2_cast9_fu_799_p1 << tmp_7_i_i_i3_fu_845_p1;

assign tmp_i_i_i4_fu_1237_p2 = tmp_3_i_i_i3_cast7_fu_1179_p1 << tmp_7_i_i_i4_fu_1227_p1;

assign tmp_i_i_i_i2_cast8_fu_803_p1 = loc_V_reg_1533;

assign tmp_i_i_i_i3_cast6_fu_1183_p1 = loc_V_2_fu_1155_p4;

assign tmp_s_fu_621_p2 = ((Parameters_q0 == 32'd0) ? 1'b1 : 1'b0);

endmodule //cnn
